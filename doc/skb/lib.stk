;;;;
;;;; lib.stk    -- Library for STklos Documentation Building
;;;;
;;;; Copyright © 2003-2020 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 20-Dec-2003 23:23 (eg)
;;;; Last file update:  2-Jul-2020 13:23 (eg)
;;;;

(load "srfi.stk")
(load "stklos-version")


;;;;
;;;; Customization
;;;;
(define *doc* '())          ;; The documentation datbase when in memory
(define *stderr* (current-error-port))
(define *verbose* (getenv "DEBUG"))

(define *header-bg*     "#dddddd")      ;"#bbe1c9"
(define *header-fg*     "#5151b9")
(define *example-bg*    "#fafafa")
(define *example-bg*    "#fafafa")
(define *example-width* "90%")


;======================================================================
;
;               read-database
;
;======================================================================
(define (read-database f)
  (when *verbose* (format *stderr* "Reading database ..."))
  (let ((in (open-input-file f)))
    (do ((proc (read in) (read in)))
    ((eof-object? proc))
;      (format *stderr* "~A " (car proc))
      (set! *doc* (cons (append proc (list :seen #f)) *doc*))))
  (when *verbose* (format *stderr* " Done\n")))

;======================================================================
;
;               rewrite-for-skribe
;
;======================================================================

(define var-rgxp      (string->regexp "\\|([^|]+)\\|"))
(define arrow-rgxp    (string->regexp "=>"))
(define pipe-rgxp     (string->regexp "@pipe"))
(define print-rgxp    (string->regexp "@print{?}?"))
(define lisp-rgxp     (string->regexp "@lisp"))
(define elisp-rgxp    (string->regexp "@end lisp"))
(define R4RS-rgxp     (string->regexp "R4RS"))
(define R5RS-rgxp     (string->regexp "R5RS"))
(define R6RS-rgxp     (string->regexp "R6RS"))
(define R7RS-rgxp     (string->regexp "R7RS"))
(define STklos-rgxp   (string->regexp "STklos"))
(define linebrk-rgxp  (string->regexp "@l"))

(define (fontified-code code)
  (blockquote
   (color :class "code" :bg *example-bg* :width *example-width*  :margin 4
      (prog :line #f
        (source :language stklos-language code)))))
(define (raw-code code)
  (blockquote
   (color :bg *example-bg* :width *example-width* :margin 4
      (prog :line #f
        (source code)))))

(define (symbol-print)  (symbol 'dashv))
(define (symbol-arrow)  (symbol '=>))



(define (rewrite-for-skribe def)
  ;; rewrite |%f| and |%t|
  (set! def (regexp-replace-all "\\|%(f|t)\\|" def "|#\\1|"))
  ;; rewrite |xxx| in @code{xxx}
  (set! def (regexp-replace-all var-rgxp def ",(code [\\1])"))
  ;; rewrite => in an arrow
  (set! def (regexp-replace-all arrow-rgxp def ",(symbol-arrow)"))
  ;; rewrite @pipe to a bar
  (set! def (regexp-replace-all pipe-rgxp def "|"))
  ;; rewrite @print to |-
  (set! def (regexp-replace-all print-rgxp def ",(symbol-print)"))
  ;; rewrite @lisp ... @end lisp
  (set! def (regexp-replace-all lisp-rgxp def ",(fontified-code ["))
  (set! def (regexp-replace-all elisp-rgxp def "])"))

  ;; rewrite R4RS
  (set! def (regexp-replace-all R4RS-rgxp def ",(rfour)"))
  ;; rewrite R5RS
  (set! def (regexp-replace-all R5RS-rgxp def ",(rfive)"))
  ;; rewrite R6RS
  (set! def (regexp-replace-all R6RS-rgxp def ",(rsix)"))
  ;; rewrite R7RS
  (set! def (regexp-replace-all R7RS-rgxp def ",(rseven)"))
  ;; rewrite STklos
  (set! def (regexp-replace-all STklos-rgxp def ",(stklos)"))
  ;; rewrite linebreak
  (set! def (regexp-replace-all linebrk-rgxp def ",(linebreak 2)"))

  def)



;======================================================================
;
;           insert-documentation
;
;======================================================================
(define (doc-html name type synopsis similar txt)
  (define (show-form x)
    (code (bold (color :fg "IndianRed" x))))
  (define (show-type x)
    (color :fg "darkolivegreen"
       (it (case x
         ((syntax)          [,(rfive) syntax])
                 ((r57rs-procedure) [,(rfive)/,(rseven) procedure])
                 ((r7rs-procedure)  [,(rseven) procedure])
                 ((r7rs-syntax)     [,(rseven) syntax])
         ((extended-syntax) [,(stklos) syntax])
         ((procedure)       [,(rfive) procedure])
         ((extended)        [,(stklos) procedure])))))
  (list
   (linebreak)
   (color :bg "#dddddd" :width 100. :class "doc-box"
      ;; Put marks for all the functions defined in this entry
      (map (lambda (x) (mark (format "~A" x)))
           (cons name similar))
      ;; Add all this function in the index
      (map (lambda (x) (index (format "~A" x)))
           (cons name similar))
      ;; Display first line of synopsis
      (table :width 100.
         (tr (td (show-form (car synopsis)))
             (td :class "align-right" (show-type type))))
      ;; Display (eventually) the other lines of synopsis
      (map (lambda (x) (list (show-form x) (linebreak)))
           (cdr synopsis))
      ;; Display the description text
      (linebreak)
      (eval (read-from-string
         (string-append "["
                (rewrite-for-skribe txt)
                "]"))))))

(define (doc-context name type synopsis similar txt)
  (define (show-form x)
    (code (bold (color :fg *header-fg* x))))
  (define (show-type x)
    (color :fg "peru"
       (it (case x
         ((syntax)          [,(rfive)  ,(linebreak) syntax])
                 ((r57rs-procedure) [,(rfive) ,(linebreak) ,(rseven)
                                     ,(linebreak) procedure])
                 ((r7rs-procedure)  [,(rseven) ,(linebreak) procedure])
                 ((r7rs-syntax)     [,(rseven) ,(linebreak) syntax])
         ((extended-syntax) [,(stklos) ,(linebreak) syntax])
         ((procedure)       [,(rfive)  ,(linebreak) procedure])
         ((extended)        [,(stklos) ,(linebreak) procedure])))))

  (list
   (color :width 100. :border 0 :bg *header-bg* :margin 3
      ;; Put marks for all the functions defined in this entry
      (map (lambda (x) (mark (format "~A" x)))
           (cons name similar))
      ;; Add all this function in the index
      (map (lambda (x) (index (format "~A" x)))
           (cons name similar))
      (let Loop ((l   synopsis)
             (res (list (context-margin :text (show-type type)))))
        (cond
          ((null? l)
           (reverse! res))
          ((null? (cdr l))
           (Loop (cdr l) (cons (show-form (car l)) res)))
          (else
           (Loop (cdr l) (cons (list (show-form (car l))
                     (! "\\\\\n") )
                   res))))))
      ;; Display the description text
   (blockquote (eval (read-from-string
              (string-append "["
                     (rewrite-for-skribe txt)
                     "]"))))))
(define doc #f)


(define (insertdoc item)
  (let ((lst (assoc item *doc*)))
    (unless lst
      (format *stderr* "Error: no documentation for item ~S\n" item)
      (exit 1))

    (when *verbose*
      (format *stderr* "Documentation of ~S\n" item))
    (let ((infos (cdr lst)))
      (if (key-get infos :see #f)
      ;; Asked for an item which is not a main entry
      (format *stderr* "doc for ~S requested whereas main entry is ~S\n"
          item (key-get infos :see))
      ;; Generate a definition
      (let ((type (key-get infos :type))
        (syn  (string-split (key-get infos :synopsis) "\n"))
        (desc (key-get infos :description))
        (sim  (key-get infos :similar '())))
        ;; Retain that we have document
        (key-set! (cdr lst) :seen #t)
        (doc item type syn sim desc))))))

;======================================================================
;
;           show-undocumented
;
;======================================================================
(define (show-undocumented)
  (format *stderr* "\n\n**** Undocumented procedures:\n")
  (for-each (lambda (x)
;         (write x)
          (unless (or (key-get (cdr x) :see #f) (key-get (cdr x) :seen))
        (format *stderr* "\t~S\n" (car x))))
        *doc*)
  (format *stderr* "****\n"))


;;;;
;;;; Initializations
;;;;
(define *engine-type* #f)

(cond
  ((skribe-env-has-prop? 'html)             ;; HTML
     (set! doc doc-html)
     (set! *example-bg*    "ivory")
     (set! *example-width* "90%")
     (set! *engine-type* 'html))
  ((skribe-env-has-prop? 'context)          ;; ConTeXt
     (set! doc doc-context)
     (set! *example-width* "broad")
     (set! *engine-type* 'tex)))
