;; ======================================================================
;;
;; 			STklos Reference Manual
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;; USA.
;;           Author: Erick Gallesio [eg@unice.fr]
;;    Creation date: 26-Nov-2000 18:19 (eg)
;; Last file update: 18-Aug-2004 11:28 (eg)
;;
;; ======================================================================


;; ======================================================================
;;
;;			Program Structure
;;
;; ======================================================================

(chapter :title "Program structure"

(p [R5RS discusses how to structure programs. Everything which is defined
in Section 5 of R5RS applies also to STklos. To make things
shorter, this aspects will not be described here (see R5RS for
complete information).])

(index "modules")
(index "name space")

(p [STklos modules can be used to organize a program into separate
environments (or ,(emph "name spaces")). Modules provide a clean way to
organize and enforce the barriers between the components of a program.])

(p [STklos provides a simple module system which is largely inspired from
the one of Tung and Dybvig exposed in ,(ref :bib "Tung-Dybvig-96"). As their
modules system, STklos modules are defined to be easily used in an
interactive environment. ])

(index "global variable")
(index "variable" :note "global")
(insertdoc 'define-module)
(insertdoc 'current-module)
(insertdoc 'find-module)
(insertdoc 'module?)
(insertdoc 'export)
(insertdoc 'import)
(insertdoc 'select-module)
(insertdoc 'symbol-value)
(insertdoc 'symbol-value*)
(insertdoc 'module-name)
(insertdoc 'module-imports)
(insertdoc 'module-exports)
(insertdoc 'module-symbols)
(insertdoc 'all-modules)
(insertdoc 'in-module))