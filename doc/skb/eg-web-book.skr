;;;;
;;;; eg-web-book		-- A variation of Manuel Web-book 
;;;;
;;;;
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 11-Oct-2004 14:48 (eg)
;;;; Last file update: 14-Oct-2004 13:06 (eg)


;;;; ======================================================================
;;;; Choose HTML engine
;;;; ======================================================================
(define he (find-engine 'html))
(default-engine-set! he)

;;;; ======================================================================
;;;;	flat ...
;;;; ======================================================================
(define (flat l)
  (cond 
    ((null? l) l)
    ((pair? l) (append (flat (car l))
		       (flat (cdr l))))
    (else      (list l))))

;;;; ======================================================================
;;;;	HTML Chapter Titles ...
;;;; ======================================================================
(define (my-chapter-title n e)
   (let* ((p (ast-document n))
	  (id (markup-ident n))
	  (ti (let* ((nb (html-container-number n e))
		     (ti (markup-option n :title))
		     (nti (and tc
			       (if (and nb (not (equal? nb "")))
				   (list (markup-option p :title)
					 (! "<hr width=100>")
					 nb 
					 ". "
					 ti)
				   ti))))
		 (new markup
		    (markup (symbol-append '&html- (markup-markup n) '-title))
		    (ident (string-append id "-title"))
		    (parent n)
		    (options '((author ())))
		    (body nti)))))
      (case (markup-markup n)
	 ((chapter)
	  (skribe-message "  [~s chapter: ~a]\n" (engine-ident e) id))
	 ((section)
	  (skribe-message "    [~s section: ~a]\n" (engine-ident e) id)))
      (&html-generic-document n ti e)))

(markup-writer 'chapter
   :options '(:title :number :file :toc :html-title :env)
   :predicate (lambda (n e)
		 (or (markup-option n :file) (engine-custom e 'chapter-file)))
   :action my-chapter-title)

;;;; ======================================================================
;;;; 	toc-browsing ...
;;;; ======================================================================
(define (toc-browsing d c e)
  (let ((chaps (filter (lambda (n) (is-markup? n 'chapter)) 
		       (flat (markup-body d)))))
    (apply table :width 97. :border 1 :frame 'box :cellpadding 0 :cellspacing 0
       (tr (th :align 'center :colspan 2 :bg "darkolivegreen" (color :fg "white" "Contents")))
       (tr :bg "white" 
	   (td "") 
	   (td :align 'left (ref :handle (handle d) :text "*Top*")))
       (map (lambda (x)
	      (tr :bg (if (eq? x c) "#ffffd0" "white")
		  (td :width 8. :align 'left :valign 'top 
		      (html-container-number x e))
		  (if (eq? x c)
		      (td :align 'left 
			 (ref :handle (handle x))
			 (linebreak)
			 (toc :chapter #t :section #t :subsection #f
			      (handle c)))
		      (td :align 'left (ref :handle (handle x))))))
	    chaps))))
 (define (toc-browsing d c e)
  (let ((chaps (filter (lambda (n) (is-markup? n 'chapter)) 
		       (flat (markup-body d)))))
    (apply table :width 97. :border 1 :frame 'box :cellpadding 0 :cellspacing 0
       (tr (th :align 'center :colspan 2 :bg "darkolivegreen" (color :fg "white" "Contents")))
       (tr :class "navnorm"
	   (td "") 
	   (td :align 'left (ref :handle (handle d) :text "*Top*")))
       (map (lambda (x)
	      (tr :class  (if (eq? x c) "navsel" "navnorm")
		  (td :width 8. :align 'left :valign 'top 
		      (html-container-number x e))
		  (if (eq? x c)
		      (td :align 'left 
			 (ref :handle (handle x))
			 (linebreak)
			 (toc :chapter #t :class "truc" :section #t :subsection #f
			      (handle c)))
		      (td :align 'left (ref :handle (handle x))))))
	    chaps))))
   

;;;; ========================-==============================================
;;;; 	Customizations
;;;; ======================================================================
(define *border-bg* "#E6F2E6")

(engine-custom-set! he 'chapter-file #t)		; one chapter/page
(engine-custom-set! he 'css "doc-style.css")
(engine-custom-set! he 'title-background *border-bg*)	
(engine-custom-set! he 'section-title-background *border-bg*)
(engine-custom-set! he 'subsection-title-background #f)
(engine-custom-set! he 'subsection-title-foreground "darkolivegreen")
(engine-custom-set! he 'subsubsection-title-background #f)

(engine-custom-set! he 'left-margin-size 20.)	
(engine-custom-set! he 'left-margin-background *border-bg*)
(engine-custom-set! he 'left-margin			; the left margin
   (lambda (n e) 
      (let ((d (ast-document n))
	    (c (ast-chapter n)))
	 (list (linebreak 1)
	       (toc-browsing d c e)))))
