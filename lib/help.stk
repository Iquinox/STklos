;;;;
;;;; help.stk		-- Interactive help
;;;; 
;;;; Copyright © 2009-2010 Erick Gallesio - Polytech'Nice-Sophia <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;;
;;;; This file is the re-implementation of a code given to me by
;;;; Michael Feyereisen [mfeyereisen@gmail.com]. Thanks to him for
;;;; having pushed me to finally implement the help function. 
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 20-Dec-2009 18:26 (eg)
;;;; Last file update:  2-Jan-2010 16:55 (eg)
;;;;

;; ----------------------------------------------------------------------
;; Database reading
;; ----------------------------------------------------------------------
(define (read-database name)
  (let ((f (open-file name "r")))
    (if f
	(let Loop ((res '())
		   (item (read f)))
	  (if (eof-object? item)
	      (begin (close-port f) res)
	      (Loop (cons item res) (read f))))
	;; file cannot be opened
	(begin
	  (eprintf "Warning: cannot open ~S.\n" name)
	  '()))))

(define *the-doc*
  (read-database (make-path (%library-prefix) "share" "stklos" (version) "DOCDB")))


;; ----------------------------------------------------------------------
;; pretty-doc ...
;; ----------------------------------------------------------------------
(define (pretty-doc str)
  ;; suppress some common Skribe things from the doc string
  (set! str (regexp-replace-all "£" str ""))
  (set! str (regexp-replace-all "@lisp" str (do-color 'blue)))
  (set! str (regexp-replace-all "@end lisp" str (do-color 'normal)))
  str)
	

;; ----------------------------------------------------------------------
;; find-documentation
;; ----------------------------------------------------------------------
(define-generic find-documentation)

(define-method find-documentation ((self <symbol>))
  (let* ((doc (assoc self *the-doc*))
	 (see (and doc (key-get (cdr doc) :see #f))))
    (cond
      (see
         ;; the symbol is indirectly documented 
         (find-documentation see))
      (doc
         ;; found documentation. Format it a little bit
         (pretty-doc (string-append (key-get (cdr doc) :synopsis)
				    "\n\n"
				    (key-get (cdr doc) :description)
				    "\n")))
      ((char=? (string-ref (symbol->string self) 0) #\%)
        (string-append
	  "Symbols beginning with '%' are intended for low-level use \n"
	  "and have therefore been left undocumented.\n"
	  "Furthermore, they can be changed without notice. Dont use them.\n"))
      (else
         ;; no documentation
         (format "No documentation for ~s\n" self)))))


(define-method find-documentation ((self <procedure>))
  (let ((doc (%procedure-doc self)))
    (or doc
	(let ((name (%procedure-name self)))
	  (and (string? name)
	       (find-documentation (string->symbol name)))))))

(define-method find-documentation ((self <generic>))
  (or (generic-function-documentation self)
      (find-documentation (generic-function-name self))))

(define-method find-documentation ((self <method>))
  (find-documentation (method-procedure self)))

(define-method find-documentation (obj)
  #f)

;; ----------------------------------------------------------------------
;; help
;; ----------------------------------------------------------------------
#|
<doc EXT help
 * (help obj)
 * (help)
 *
 * When called with an argument, |help| tries to give some help on the
 * given object, which could be a symbol, a procedure, a generic function
 * or a method. Whe called called without arguments, |help| enters a
 * read-help-print loop. The documentation for an object is searched in
 * the object itself or, if absent, in STklos documentation.  Inserting
 * the documentation in an objet is very similar to Emacs docstrings: a
 * documentation string is defined among the code. Exemples of such
 * strings are given below
 * @lisp
 * (define (foo n)
 *   "If the function body starts with a string, it's a docstring"
 *   (+ n 1))
 * 
 * (define-generic bar
 *   :documentation "Generic function docsting for bar")
 * 
 * (define-method bar ((x <integer>))
 *   "Probably less useful: as in functions, methods can have docstrings"
 *   (- x 1))
 * @end lisp
doc>
|#
(define-method help (obj)
  (let ((doc (find-documentation obj)))
    (if doc
	(printf "Documentation for ~s:\n~a\n" obj doc)
	(printf "No documentation for ~s\n" obj))))


(define-method help ()
  ;; Interactive help
  (display (do-color 'blue "You are in the interactive STklos help. "
		           "Enter an *eof* to exit\n"))
  (let Loop ((prompt (do-color 'green "help> " 'none)))
    (display prompt) (flush-output-port)
    (let ((name (read)))
      (unless (eof-object? name)
	(if (symbol? name)
	    (let ((val (symbol-value* name (current-module) #f)))
	      (display (if val
			   (find-documentation val)
			   (do-color 'red (format "Symbol ~S is unbound\n" name)))))
	    (display (do-color 'red "help only accepts symbols.\n")))
	(Loop prompt))))
  (display "done.\n"))

(provide "help")