;;;;
;;;; srfi-59.stk	-- Implementation of SRFI 59
;;;; 
;;;; 
;;;;           Author: Erick Gallesio using code from Aubrey Jaffer 
;;;;    Creation date:  8-Mar-2005 
;;;; Last file update: 25-Sep-2009 23:59 (eg)
;;;;

(unless (provided? "STklos.init")
  
(define (implementation-vicinity)
  (case (machine-type)
    ((unix)	 (string-append (getenv "HOME") "/.stklos/slib/"))
    (else 	 (error 'implementation-vicinity 
			"unknown implementation on this system"))))

(define library-vicinity
  (let ((library-path
	 (or
	  ;; Use this getenv if your implementation supports it.
	  (getenv "SCHEME_LIBRARY_PATH")
	  ;; Use this path if your scheme does not support GETENV
	  ;; or if SCHEME_LIBRARY_PATH is not set.
	  (case (machine-type)
	    ((unix) (let ((perso (expand-file-name "~/.stklos/slib/require.scm")))
		      (string-append
		          (if (file-exists? perso)
			      (expand-file-name "~/.stklos/slib")
			      (make-path (%library-prefix)
					 "lib"
					 "stklos"
					 "slib"))
			  "/")))
	    ((vms) "lib$scheme:")
	    ((ms-dos) "C:\\SLIB\\")
	    (else "")))))
    (lambda () library-path)))

(define (home-vicinity)
  (let ((home (getenv "HOME")))
    (and home
	 (case (machine-type)
	   ((unix coherent ms-dos)	;V7 unix has a / on HOME
	    (if (eqv? #\/ (string-ref home (+ -1 (string-length home))))
		home
		(string-append home "/")))
	   (else home)))))

(define in-vicinity string-append)

(define (user-vicinity)
  (case (machine-type)
    ((vms)	"[.]")
    (else	"")))

(define sub-vicinity
  (let ((*vicinity-suffix*
	 (case (machine-type)
	   ((nosve) ".")
	   ((macos thinkc) ":")
	   ((ms-dos windows atarist os/2) "\\")
	   ((unix coherent plan9 amiga) "/"))))
    (lambda (vic name)
      (string-append vic name *vicinity-suffix*))))

(define (make-vicinity <pathname>) <pathname>)


(define vicinity:suffix?
  (let ((suffi
	 (case (machine-type)
	   ((ms-dos windows atarist os/2)	'(#\\ #\/))
	   ((unix coherent plan9)		'(#\/))
	   (else
	    (eprintf "Warning:  unknown 'machine-type ~S " (machine-type))
	    "/"))))
    (lambda (chr) (and (memv chr suffi) #t))))

(define (pathname->vicinity pathname)
  (let loop ((i (- (string-length pathname) 1)))
    (cond ((negative? i) "")
	  ((vicinity:suffix? (string-ref pathname i))
	   (substring pathname 0 (+ i 1)))
	  (else (loop (- i 1))))))
)
(provide "srfi-59")