;;;;
;;;; srfi-34.stk        -- SRFI-34 support
;;;;
;;;; Copyright Â© 2004-2019 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 27-May-2004 22:00 (eg)
;;;; Last file update: 25-Jun-2019 15:15 (eg)
;;;;


#|
<doc EXT-SYNTAX with-handler
 * (with-handler <handler> <expr1> ... <exprn>)
 *
 * Evaluates the sequences of expressions |<expr1>| to |<exprn>|.
 * |<handler>| must be a procedure that accepts one argument. It is installed
 * as the current exception handler for the dynamic extent (as determined by
 * dynamic-wind) of the evaluations of the expressions
 * @lisp
 * (with-handler (lambda (c)
 *                 (display "Catch an error\\n"))
 *    (display "One ... ")
 *    (+ "will yield" "an error")
 *    (display "... Two"))
 *        @print{} "One ... Catch an error"
 * @end lisp
doc>

<doc R7RS with-exception-handler
 * (with-exception-handler <handler> <thunk>)
 *
 * This form is similar to |with-handler|. It uses a ,(emph "thunk") instead of
 * a sequence of expressions. It is conform to ,(link-srfi 34).
 * In fact,
 * @lisp
 * (with-handler <handler> <expr1> ... <exprn>)
 * @end lisp
 * is equivalent to
 * @lisp
 * (with-exception-handler <handler>
 *   (lambda () <expr1> ... <exprn>))
 * @end lisp
doc>
|#
(define-macro (with-exception-handler handler thunk)
  `(with-handler ,handler (,thunk)))



#|
<doc R7RS guard
 * (guard (<var> <clause1 > <clause2 > ...)  <body>)
 *
 * Evaluating a guard form evaluates |<body>| with an exception handler
 * that binds the raised object to |<var>| and within the scope of that
 * binding evaluates the clauses as if they were the clauses of a cond
 * expression. That implicit cond  expression is evaluated with the
 * continuation and dynamic environment of the |guard| expression.
 * If every |<clause>|'s test evaluates to false and there is no |else|
 * clause, then |raise|  is re-invoked on the raised object within the
 * dynamic environment of the original call to |raise| except that the
 * current exception handler is that of the |guard| expression.
 *
 * @lisp
 * (guard (condition
 *          ((assq 'a condition) =\> cdr)
 *          ((assq 'b condition)))
 *   (raise (list (cons 'a 42))))
 *          => 42
 *
 * (guard (condition
 *          ((assq 'a condition) =\> cdr)
 *          ((assq 'b condition)))
 *   (raise (list (cons 'b 23))))
 *          => (b . 23)
 *
 * (with-handler (lambda (c) (format "value ~A was raised" c))
 *   (guard (condition
 *        ((assq 'a condition) =\> cdr)
 *        ((assq 'b condition)))
 *       (raise (list (cons 'x 0)))))
 *          => "value ((x . 0)) was raised"
 * @end lisp
doc>
|#
(define-macro (guard clauses . body)
  (let* ((var  (car clauses))
         (last (last-pair clauses))
         (hdlr (if (and (pair? last) (pair? (car last)) (eq? (caar last) 'else))
                   `(lambda (,var)
                      (cond
                        ,@(cdr clauses)))
                   `(lambda (,var)
                         (cond
                           ,@(cdr clauses)
                           (else (raise ,var)))))))
    `(with-handler ,hdlr ,@body)))


(export-syntax with-exception-handler guard)
(provide "srfi-34")
