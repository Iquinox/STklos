;;;;
;;;; snow-misc.stk	-- Snow Misc features
;;;; 
;;;; Copyright © 2006 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 21-Dec-2006 12:02 (eg)
;;;; Last file update: 21-Dec-2006 12:10 (eg)
;;;;

;; ======================================================================
;;	define*
;; ======================================================================
(define-macro (define* def . args)
  (cond
    ((symbol? def)
     `(define ,def ,@args))
     ((and (pair? def) (memq (car def) '(unquote access*)))
      `(define ,(cadr def) ,@args))
     (else 
      `(define ,(srfi89->ext-lambda-proto def)
	 ,@args))))

;; ======================================================================
;;	define-macro*
;; ======================================================================
(define-macro (define-macro* . args)
  `(define-macro ,@args))


;; ======================================================================
;; 	unquote / access*
;; ======================================================================
(define-macro (unquote var-or-set)
  `(access* ,var-or-set))


(define-macro (access* var-or-set)
  (cond
    ((symbol? var-or-set)
     var-or-set)

    ((and (pair? var-or-set)
	  (eq? (car var-or-set) 'set!)
	  (pair? (cdr var-or-set)))
     (let ((var (cadr var-or-set)))
       (cond
	 ((symbol? var)
	  `(set! ,var ,@(cddr var-or-set)))
	 ((and (pair? var)
	       (memq (car var) '(access* unquote))
	       (pair? (cdr var))
	       (null? (cddr var)))
	  `(set! ,(cadr var) ,@(cddr var-or-set)))
	 (else
	  (error "access* syntax error")))))

    (else
     (error "access* syntax error"))))


