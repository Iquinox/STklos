;;;;
;;;; _snow.stk	-- A special version of _snow package (the one used by everybody)
;;;; 
;;;; Copyright © 2006-2007 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 21-Dec-2006 14:55 (eg)
;;;; Last file update: 17-Jan-2007 10:54 (eg)
;;;;

;//FIXME: _snow:program-filename should be defined as program-file-name

(require "srfi-4")		;;//FIXME:


(define-module _snow
  (import SNOW)
  (export snow-raise snow-error snow-with-exception-catcher
	  _snow:program-filename

	  snow-condition snow-type-check-condition snow-error-condition

	  ;; FIXME
	  snow-exception)
	  

  ;;
  ;; Functions
  ;;
  (define (snow-raise exc)
    (raise exc))

  (define (snow-with-exception-catcher catcher thunk)
    (with-handler catcher (thunk)))

  (define (snow-error msg . args)
    (eprintf "*** SNOW ERROR -- ~A" msg)
    (for-each (lambda (x) (eprintf " ~S" x))
	      args)
    (eprintf "\n")
    (raise (exception* snow-error-condition msg: msg args: args)))

  (define _snow:program-filename (program-name))

  ;;
  ;; Exceptions
  ;;
;;//  (define-exception* snow-condition)
;;//
;;//  (define-exception* snow-type-check-condition
;;//    parent: snow-condition)
;;//
;;//  (define-exception* snow-error-condition
;;//    parent: snow-condition
;;//    msg
;;//    args))
  (define-record* snow-condition)

  (define-record* snow-type-check-condition parent: snow-condition)

  (define-record* snow-error-condition
    parent: snow-condition
    msg
    args)


  (define snow-exception snow-condition) ;; FIXME: Bigloo adaptation
)
  
;; ----------------------------------------------------------------------
;; Redefine all the symbols exported by _snow to the STklos module
;; so that STklos is in fact now a Snow interpreter
(%redefine-module-exports (find-module '_snow) (find-module 'STklos))


(provide "_snow")
