;;;;
;;;; split-define.stk	-- Split define* form
;;;; 
;;;; Copyright © 2007 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date:  9-Feb-2007 15:11 (eg)
;;;; Last file update: 18-Feb-2007 22:13 (eg)
;;;;



;; ----------------------------------------------------------------------
;; 	%srfi89->ext-lambda-proto ...
;; ----------------------------------------------------------------------
(define (%srfi89->ext-lambda-proto args)
  ;; Code derivated from Bigloo srfi89 support for packages
  ;; Code given by Manuel Serrano

  (define (srfi89-positional? a)
    (match-case a
      (((? symbol?) ?-) #t)
      (else             #f)))

  (define (srfi89-named? a)
    (match-case a
      (((? keyword?) (? symbol?) ?-) #t)
      (else                          #f)))

  (define (srfi89-named->dsssl-named arg)
    (match-case arg
       ((?key ?- ?val)
	  (list (string->symbol (keyword->string key)) val))))
  
  
  (if (not (pair? args))
      args
      (let loop ((a args)
		 (reqs '())
		 (optionals '())
		 (names '()))
	(cond
	  ((symbol? a)
	   (if (or (pair? optionals) (pair? names))
	       (error "not implemented yet ~S" args)
	       args))
	  ((null? a)
	   (if (and (null? optionals) (null? names))
	       args
	       (let ((opts (if (pair? optionals)
			       (cons '#!optional (reverse! optionals))
			       '()))
		     (names (if (pair? names)
				(cons '#!key names)
				'())))
		 (append (reverse! reqs) opts names))))
	  ((not (pair? a))
	   (error "illegal argument ~S" a))
	  (else
	   (let ((a0 (car a)))
	     (cond
	       ((symbol? a0)
		(loop (cdr a) (cons a0 reqs) optionals names))
	       ((srfi89-positional? a0)
		(loop (cdr a) reqs (cons a0 optionals) names))
	       ((srfi89-named? a0)
		(let ((d (srfi89-named->dsssl-named a0)))
		  (loop (cdr a) reqs optionals (cons d names))))
	       (else
		(error "illegal argument ~S" a)))))))))


;; ----------------------------------------------------------------------
;; 	define*
;; ----------------------------------------------------------------------
(define-macro (define* . body)
  (match-case body
     (((?var . ?args) . ?rest)
        `(define (,var . ,(%srfi89->ext-lambda-proto args))  ,@rest))
     ((?var ?value)
        `(define ,var ,value))
     (else
        (error 'define* "bad form ~S" body))))

;;;
;;; export %srfi89->ext-lambda-proto 
;;;
(export %srfi89->ext-lambda-proto)
