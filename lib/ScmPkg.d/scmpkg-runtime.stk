;;;;
;;;; scmpkg-runtime.stk	-- ScmPkg runtime for STklos
;;;; 
;;;; Copyright © 2007 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 12-Feb-2007 18:51 (eg)
;;;; Last file update: 28-Feb-2007 22:05 (eg)
;;;;

;; ======================================================================
;; 	record ...
;; ======================================================================


;; ======================================================================
;; 	exception ...
;; ======================================================================

;;;;
;;;; definition of condition types for ScmPkg
;;;;
(define &scmpkg-cond (make-condition-type '&scmpkg-cond
					  &condition
					  '(location message backtrace)))
(define &@exception
  (make-compound-condition-type '@exception
				(list &condition &scmpkg-cond)))
(define &@error  ;; &error-message)
  (make-compound-condition-type '@error
				(list &error-message &scmpkg-cond)))
(define &@io-error
  (make-compound-condition-type '@io-error
				(list &i/o-error &scmpkg-cond)))
(define &@type-error
  (make-compound-condition-type '@type-error
				(list &error-message &scmpkg-cond)))
(define &@not-implemented-error
  (make-compound-condition-type '@not-implemented-error
				(list &condition &scmpkg-cond)))

;;;;
;;;; @RAISE and @ERROR
;;;;
(define @raise raise)

(define (@error proc reason obj)
  ; (&raise (exception @error ?proc proc ?reason reason ?obj obj))
  (error proc reason obj))

(define (@exception-message e)
  (if (and (condition? e)
	   (condition-has-type? e &scmpkg-cond))
    (condition-ref e 'message)
    (error "cannot find a message associated to exception ~S" e)))

;; ======================================================================
;; 	File System Primitives ...
;; ======================================================================
(define (@directory-list dir)
  (delete! "."
	   (delete! ".."
		    (directory-files dir))))


(define (@file-exists? filename)
  (or (file-exists? filename)
      (file-is-directory? filename)))


(define @file-directory? 	file-is-directory?)
(define @delete-file 		remove-file)
(define @rename-file 		rename-file)


(define (@create-directory dir)
  (if (string? dir)
    (with-handler (lambda (c) #f)
       (make-directory dir)
       #t)
    (error "bad string ~S" dir)))


(define (@delete-directory dir)
  (if (string? dir)
    (with-handler (lambda (c) #f)
       (remove-directory dir)
       #t)
    (error "bad string ~S" dir)))


;; ======================================================================
;; 	Host OS ...
;; ======================================================================
(define @exit 		exit)
(define @command-line 	(lambda () (cons (program-name) (argv))))
(define @getenv 	getenv)
(define @system 	system)



;; ======================================================================
;; 	Bit Operation ...
;; ======================================================================
(define @fxand			  bit-and)
(define @fxior			  bit-or)
(define @fxxor			  bit-xor)
(define @fxnot			  bit-not)
(define @fxarithmetic-shift-left  bit-shift)
(define @fxarithmetic-shift-right bit-rshift)

;; ======================================================================
;; 	Misc ...
;; ======================================================================
(define @unspecified 	void)
(define @gensym 	gensym)

