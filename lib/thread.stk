;;;;
;;;; threads.stk				-- Threads support
;;;; 
;;;; Copyright © 2006 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 26-Jan-2006 22:56 (eg)
;;;; Last file update: 14-Apr-2006 20:00 (eg)
;;;;
(define (%thread-timeout->seconds timeout)
  (cond
    ((time? timeout) (time->seconds timeout))
    ((not timeout)   timeout)
    ((real? timeout) (+ (time->seconds (current-time))
			timeout))
    (else (error "bad timeout ~S" timeout))))
 

(define (make-thread thunk :optional (name (symbol->string (gensym "thread"))))
  (define (thread-handler c)
    (%thread-end-exception-set! (current-thread) c)
    c)
  (%make-thread (lambda ()
		  (with-handler thread-handler
		     (thunk)))
		name))


(define (thread-sleep! timeout)
  (let ((n (%thread-timeout->seconds timeout)))
    (unless n
      (error 'thread-sleep! "cannot used #f as timeout"))
    (%thread-sleep! n)))


(define (thread-join! thread :optional timeout (timeout-val #f timeout-val?))
  (if (and (eq? thread (current-thread)) (not timeout))
      (error 'thread-join! "cannot join on myself (deadlock will occur)")
      (let ((join (%thread-join! thread
				 (%thread-timeout->seconds timeout))))
	(cond
	  (join
	     ;; We had a timeout
	    (if timeout-val?
		timeout-val
		(raise (make-condition &thead-join-timeout))))
	  ((%thread-end-exception thread)
	     ;; We had an exceptionin thread. Raise it
	     (raise (%thread-end-exception thread)))
	  (else
	   ;; No exception. Return the thread-result
	   (%thread-end-result thread))))))



(define (mutex-lock! mtx :optional timeout (thread (current-thread)))
  (let ((res (%mutex-lock! mtx (%thread-timeout->seconds timeout) thread)))
    ;; Different cases for res:
    ;;  - The owning thread which is now terminated (a condition must be raised)
    ;;  - #f: we had a timeout
    ;;  - #t: otherwise
    (if (thread? res)
	(make-condition &thread-abandonned-mutex)
	res)))

(define (mutex-unlock! mtx :optional condv timeout)
  (%mutex-unlock! mtx condv timeout))
