;;;;
;;;; tune.stk	-- Package tuning
;;;; 
;;;; Copyright © 2007 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 18-Jan-2007 16:44 (eg)
;;;; Last file update: 18-Jan-2007 16:52 (eg)
;;;;


;; ----------------------------------------------------------------------
;; 	tune-package ...
;; ----------------------------------------------------------------------
(define (tune-package package dir)
  (DEBUG "DIR= ~S" dir)
  (let ((tuner (make-path dir "stklos" "tuning.stk")))
    (when (file-exists? tuner)
      (eprintf "We can tune\n"))))

;;  
;;
;;  (define (tune-package dir package version tuning)
;;   (with-trace 3 'tune-package
;;      (trace-item "dir=" dir)
;;      (trace-item "package=" package)
;;      (trace-item "tuning=" tuning))
;;   (let* ((pdir (make-file-name dir package))
;;	  (tuner (make-file-path pdir tuning "tuning.scm")))
;;      (when (and tuning (file-exists? tuner))
;;	 (let ((srcs (filter-map (lambda (x)
;;				    (let ((p (make-file-path
;;					      pdir
;;					      (string-append package "." x))))
;;				       (when (file-exists? p)
;;					  p)))
;;				 (snowfort-suffixes))))
;;	    ;; read the sources in sequence, the package being located
;;	    ;; in the first one
;;	    (if (null? srcs)
;;		(error 'tune-package "Cannot find source for package" package)
;;		(let ((ip (open-input-file (car srcs))))
;;		   (unless (input-port? ip)
;;		      (raise (instantiate::&io-port-error
;;				(proc 'tune-package)
;;				(msg "Cannot open file for input")
;;				(obj (car srcs)))))
;;		   (unwind-protect
;;		      (let* ((decl (package-read-package ip))
;;			     (body0 (port->sexp-list ip))
;;			     (bodies (append-map file->list (cdr srcs))))
;;			 (tune (suffix (car srcs))
;;			       package tuning tuner pdir
;;			       decl (append! body0 bodies)))
;;		      (close-input-port ip))))))))