;;;;
;;;; add.stk			-- Adding a file to local snowfort
;;;; 
;;;; Copyright © 2007 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 18-Jan-2007 16:59 (eg)
;;;; Last file update:  1-Feb-2007 15:55 (eg)
;;;;


;; ----------------------------------------------------------------------
;; 	local-snowfort-add! ...
;; ----------------------------------------------------------------------
(define (local-snowfort-add! snowball)
  (receive (package tuning version)
	   (parse-snowball-name snowball)
     ;; Control name validity
     (unless package
       (die (format "Incorrect snowball name ~S" snowball)))
     (when (zero? (version-number->integer version))
       (die (format "Bad version number for snowball ~S" snowball)))

     (let ((dirname  (temporary-file-name)))
       ;; Untar the given snowball
       (make-directory dirname)
       (untar snowball dirname)

       ;; Adding a package or a tuning?
       (if tuning 
	   (local-snowfort-add-tuning!  snowball package version tuning dirname)
	   (local-snowfort-add-package! snowball package version dirname))
       ;; Remove the temporary directory
       (rm-rf dirname))))
    
;; ----------------------------------------------------------------------
;; 	local-snowfort-add-package! ...
;; ----------------------------------------------------------------------
(define (local-snowfort-add-package! snowball package version directory)

  (define (find-src name)
    (let ((snow (make-path directory name (format "~a.snow" name)))
	  (scm  (make-path directory name (format "~a.scm" name))))
      (if (file-exists? snow) snow scm)))

  (when (> (snowman-verbosity) 0)
    (eprintf "Adding  package ~S (~a) to local repository\n" package version))
  (let* ((src  (find-src package))
	 (in   (open-file src "r")))
    (unless in
      (die (format "Cannot open source file ~S ~S" directory src)))
    (let ((pkg* (parse-package-package* in)))
      (close-port in)
      (match-case pkg*
         ((package* ?name ?- . ?rest)
	  (let ((descr (build-package-description snowball package version rest)))
	    (copy-file snowball (make-path (snowman-cache-directory)
					   (basename snowball)))
	    (add-description-to-local-repository! descr)))
	 (else
	   (die (format "bad package* clause ~S" pkg*)))))))

;; ----------------------------------------------------------------------
;; 	local-snowfort-add-tuning! ...
;; ----------------------------------------------------------------------
(define (local-snowfort-add-tuning! snowball package version tuning directory)
  (unless (equal? tuning "stklos")
    (die "Cannot manage non STklos tunings"))
  (when (> (snowman-verbosity) 0)
    (eprintf "Adding tuning for package ~S (~a) to local repository\n"
	     package version))

  (let* ((cache-name (make-path (snowman-cache-directory) (basename snowball)))
	 (descr     `(,package
		      ,version
		      :tuning-only #t
		      :tunings (("stklos"
				 :url ""
				 :snowball ,cache-name
				 :md5 ,(md5sum-file snowball))))))
    (copy-file snowball cache-name)
    (add-description-to-local-repository! descr)))

;; ----------------------------------------------------------------------
;; 	build-package-description ...
;; ----------------------------------------------------------------------
(define (build-package-description snowball package version lst)

  (define (build-dependencies lst)
    (if (null? lst)
	'()
	(match-case (car lst)
	   ((require: ?pkg)
	    (cons (list (format "~a" pkg) "")
		  (build-dependencies (cdr lst))))
	   (else
	    (build-dependencies (cdr lst))))))
  
  (let ((descr   (assoc description: lst))
	(cat     (assoc category: lst))
	(auth    (assoc authors: lst))
	(license (assoc license: lst))
	(home    (assoc homepage: lst)))
  `(,package
    ,version
    :category ,(or cat "")
    :url ""
    :snowball ,(make-path (snowman-cache-directory) (basename snowball))
    :md5 ,(md5sum-file snowball)
    :description ,(or descr "")
    :authors ,(or auth "")
    :license ,(or license "")
    :homepage ,(or home "")
    :tunings ()
    :dependencies ,(build-dependencies lst))))

  
