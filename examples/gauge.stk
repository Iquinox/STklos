;;;;
;;;; gauge.stk				-- GTklos Gauge Demo
;;;; 
;;;; Copyright © 2000-2001 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 20-Oct-2000 12:55 (eg)
;;;; Last file update: 11-Nov-2003 18:22 (eg)
;;;;

(include "gtklos-demo.stk")

(define (main args)
  (let* ((win  (make <demo-window> :title "Gauge Demo" 
		     		   :file "gauge" :border-width 5 
				   :message "
This is a simple demo showing a gauge and the various styles it can be given.
"))
	 (grid  (make <grid> :rows 3 :columns 3 :homogeneous #f :parent win))
	 (gauge (make <gauge>
		  :text "Gauge"
		  :orientation 'left-to-right
		  :style '()
		  :width 250
		  :height 20
		  :parent `(,grid :x 0 :y 0 :width 3 :pad-x 40)))
	 (sep1  (make <separator>
		  :orientation 'horizontal
		  :parent `(,grid :x 0 :y 1 :width 3 :pad-y 10)))
	 (show  (make <check-button>
		  :text "Show value"
		  :parent `(,grid :x 0 :y 2)
		  :command (lambda(_)
			     (let ((s (style gauge)))
			       (set! (style gauge)
				 (if (memq 'percent s)
				     (delete 'percent s)
				     (cons 'percent s)))))))
	 (act    (make <check-button>
		   :text "Activity mode"
		   :parent `(,grid :x 0 :y 3)
		   :command (lambda (_)
			      (let ((s (style gauge)))
				(set! (style gauge)
				  (if (memq 'activity s)
				      (delete 'activity s)
				      (cons 'activity s)))))))
	 (sep2   (make <separator>
		   :orientation 'vertical
		   :parent `(,grid :x 1 :y 2 :height 2)))
	 (radio (make <radio-button>
		  :parent `(,grid :x 2 :y 2 :height 2)
		  :border-width 10
		  :title "Style"
		  :text "Radio Demo"
		  :texts '("Continuous" "Discrete")
		  :command (lambda (e)
			     (let ((s (style gauge)))
			       (set! (style gauge)
				 (if (equal? (text (event-widget e))
					     "Discrete")
				     (cons 'discrete s)
				     (delete 'discrete s))))))))
    
    ;; Animate the gauge
    (timeout 10
	     (lambda ()
	       (let ((v    (value gauge))
		     (from (from gauge))
		     (to   (to gauge)))
		 (set! (value gauge) (if (> v to) from (+ v 1))))))))
