;;;;
;;;; gtklos-demo.stk	-- Definition of things which are useful
;;;;			   for GTKlos demonstrations
;;;; 
;;;; Copyright © 2001-2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 24-Jul-2001 16:19 (eg)
;;;; Last file update:  8-Apr-2002 23:42 (eg)
;;;;

(require "gtklos")

;;;;
;;;; Utilities
;;;;

;; A rather bad approximation of where the demo source file lives
(define *demo-path* (list "."
			  (string-append (%library-prefix)
					 "/share/stklos/"
					 (version)
					"/demos")))

#|
//FIXME: 
;; *user-code* is set to #t if the file is loaded a second time
;; That means that this is the user which tries its code
;; All this stuff permits to provide a different interface to the demo:
;; Our code has a "Quit" and "See code" buttons, whereas user demo
;; has only a "Close" button
;; This is ugly, but it do the job
(if (not (symbol-bound? '*user-code*))
    (define *user-code* #f)
    (set! *user-code* #t))
|#

(define *user-code* #f)

(define-method eval-current-buffer (txt)
  ;; Save the current buffer in a file and load it
  (let ((tmp (temporary-file-name)))
    (text-write-file txt tmp)
    (load tmp)
    (main #f)
    (remove-file tmp)))

  
(define-method demo-see-code (file)
  (let* ((win (make <window> :title (format #f "Code of the ~S Demo" file)))
	 (txt #f)
	 (tb  (make <toolbar> :parent win :style "text" :relief "none" 
		    :items `((:text "Eval" :file "tb_evalbuf.xpm"
			      :command ,(lambda (tb pos)
					  (eval-current-buffer txt)))
			     (:text "Close" :file "tb_exit.xpm"
			      :command ,(lambda (tb pos)
					  (destroy win)))))))

    (set! txt (make <text> :parent win :width 640 :height 480))

    ;; Read the text of the demo (skipping the copyrigth)
    (let* ((fn   (find-path (string-append file ".stk") *demo-path*))
	   (port (and fn (open-file fn "r"))))
      (unless port
	(error 'demo-see-code
	       "Cannot open source file `~A.stk' for this demo" file))
      (set! (value txt) "")
      ;; Freeze text
      (text-freeze txt)

      ;; Do the reading
      (do ((l (read-line port) (read-line port)))
	  ((or (eof-object? l) (string=? l "")))
	'skipping-copyright)
      
      (do ((l (read-line port) (read-line port)))
	  ((eof-object? l))
	(text-insert txt l)
	(text-insert txt "\n"))
      ;; Unfreeze text
      (text-unfreeze txt)
      (close-port port))))

;;;; ======================================================================
;;;; 
;;;; 
;;;; 			< d e m o - w i n d o w >   W i d g e t
;;;;
;;;; This widget is a replacement of the window widget for GTklos
;;;; demonstrations, it extends this class by providing a button to quit the
;;;; demo ans see its code.
;;;;
;;;; ======================================================================

(define-class <demo-window> (<window>)
  ((message 	:init-form #f :init-keyword :message)
   (file	:init-form #f :init-keyword :file)
   (user-space  :init-form #f)))

(define-method initialize ((self <demo-window>) initargs)
  (next-method)
  (let ((lay (layout self))
	(msg (slot-ref self 'message)))

    ;; Create the top message
    (when msg
      (make <label> :text msg :parent lay))

    ;; Create the separator and the bottom buttons 
    (let ((sep  (make <separator>))
	  (hbox (make <box> :orientation 'horizontal :padding 4
		      	    :expand #t :fill #t)))
      (container-add! lay hbox :padding 3  :end #t)
      (container-add! lay sep  :padding 10 :end #t)

      (if *user-code*
	  ;; This is user code
	  ;; Create just a "Close" button
	  (make <button> :text "Close" :parent hbox
		:command (lambda (_) (destroy self)))
	  (begin
	    ;; This is the original demo code.
	    ;; Create a "Quit" and "See code" buttons
	    (make <button> :text " Quit " :parent hbox
		  :command (lambda(e) (exit 0)))
	    (make <button> :text "See code" :parent hbox
		  :command (lambda (_) (demo-see-code (slot-ref self 'file)))))))))

(provide "gtklos-demo")


#|
Usage example:
==============

(define w (make <demo-window> :title "This is a demo" :width 400
		:file "T100"
		:message "
A message which explains what is the demo for
The message itself can be on
several lines
"))

(define b1 (make <button> :text "Button 1" :parent w))
(define b2 (make <button> :text "Button 2" :parent w))

|#
