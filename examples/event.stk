;;;;
;;;; event.stk	-- Demo showing event management in GTklos
;;;; 
;;;; Copyright © 2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date:  8-Apr-2002 19:33 (eg)
;;;; Last file update:  8-Apr-2002 21:19 (eg)
;;;;

(include "gtklos-demo.stk")

(define *event-msg* "
In this demo, some handler have been placed on the buttons.
If you iconify, deiconify, or resize this window, a message is printed.
 
Try to fire them and see what is printed on the standard
output.
")

(define (main args)
  (let* ((win (make <demo-window> :title "Event Management Demo" :x 100 :y 100
		    :file "event" :border-width 10 :padding 10
		    :message *event-msg*
		    :event (make <event-handler>
			     :unmap (lambda (e)
				      (let ((w (event-widget e)))
					(format #t "Unmap: ~S\n" (title w))))
			     :map (lambda (e)
				    (let ((w (event-widget e)))
				      (format #t "Map: ~S\n" (title w))))
			     :configure (lambda (e)
					  (let ((w (event-widget e)))
					    (format #t "Configure x: ~A y: ~A\n"
						    (event-x e)
						    (event-y e)))))))
	 (b1   (make <button> :text "Enter/Leave Button" :parent win
		     :event (make <event-handler>
			      :enter (lambda (e)
				       (let ((w (event-widget e)))
					 (format #t "Entering: ~S\n" (text w))))
			      :leave (lambda (e)
				       (let ((w (event-widget e)))
					 (format #t "Leaving: ~S\n" (text w)))))))
	 (b2 (make <button> :text "Mouse Press/Release Button":parent win
		   :event (make <event-handler>
			    :press (lambda (e)
				     (let ((w (event-widget e)))
				       (format #t "Press: [~A] ~S\n"
					       (event-button e)
					       (text w))))
			    :release (lambda (e)
				       (let ((w (event-widget e)))
					 (format #t "Release: [~A] ~S\n"
						 (event-button e)
						 (text w)))))))
	 (b3 (make <text> :text "Mouse Motion" :parent win
		   :event (make <event-handler>
			    :motion (lambda (e)
				     (let ((w (event-widget e)))
				       (format #t "Motion: [~A] (~A, ~A)\n"
					       (event-button e)
					       (event-x e)
					       (event-y e))))))))
    0))


