;;;;
;;;; main.stk	-- Stklos-Pkg main program
;;;; 
;;;; Copyright © 2006-2007 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 22-Dec-2006 11:32 (eg)
;;;; Last file update:  8-Mar-2007 20:03 (eg)
;;;;

(require "getopt")
(require "match")


(include "http.stk")

(include "types.stk")
(include "params.stk")
(include "repository.stk")
(include "pkgball.stk")
(include "add.stk")
(include "tune.stk")
(include "extract.stk")
(include "misc.stk")


;; ----------------------------------------------------------------------
;;	stklos-pkg-arguments ...
;; ----------------------------------------------------------------------
(define (stklos-pkg-arguments argv)
  (let ((actions '()))

    (parse-arguments argv
       "Usage: stklos-pkg [options] [parameter ...]"
       
       "Actions"
       (("extract" :arg pkg :alternate "e" :help "Extract <pkg>. Don't install it")
	(set! actions (cons (list 'extract pkg) actions)))
       
       "Informations"
       (("depends" :arg pkg :help "Show all the dependencies of <pkg>")
	(set! actions (cons (list 'package-deps pkg) actions)))

       "Repository administration"
       (("sync" :alternate "s" :help "synchronize with remote server servers")
	(set! actions (cons 'sync actions)))
       (("list" :alternate "l" :help "list available packages")
	(set! actions (cons 'list actions)))
       (("delete-repository" :help "delete stklos-pkg repository. USE WITH CAUTION")
	(set! actions (cons 'delete-repo actions)))
       (("fill-cache" :help "fill the cache with all available packages")
	(set! actions (cons 'fill-cache actions)))
       (("clear-cache" :help "delete files present in cache")
	(set! actions (cons 'clear-cache actions)))
       (("add" :alternate "a" :arg sb
	 :help "Add <sb> pkgball to the local repository")
	(local-description-add! sb)
	(exit 0))
       
       "Misc"
       (("directory" :arg dir :alternate "C"
	 :help "Change to directory <dir> when extracting")
	(stklos-pkg-extract-dir dir))
       (("verbose" :alternate "v" :help "be verbose (can be cumulated)")
	(stklos-pkg-verbosity (+ (stklos-pkg-verbosity) 1)))
       (("help" :alternate "h" :help "display this help")
	(arg-usage (current-error-port))
	(exit 0))
       (("options" :help "display program options")
	(arg-usage (current-error-port) #t)
	(exit 0))
       (("version" :alternate "V" :help "print the version and exit")
	(eprintf "stklos-stklos-pkg shipped with STklos (version ~A)\n" (version))
	(exit 0)))

    (if (null? actions)
	'(list)
	(reverse actions))))

;; ----------------------------------------------------------------------
;;	global-handler ...
;; ----------------------------------------------------------------------
(define (global-handler c)
  (if  (and (condition? c) (condition-has-type? c &error-message))
    (let ((who (condition-ref c 'location))
	  (msg (condition-ref c 'message)))
      
      (format (current-error-port)
	      "**** ERROR: ~a~a\n"
	      msg
	      (if who (format " (in procedure ~a)" who) "")))
    (format (current-error-port) "UNKNOWN error!!!\n"))
  (exit 70))


;; ----------------------------------------------------------------------
;;	main ...
;; ----------------------------------------------------------------------
(define (main argv)
  (with-handler global-handler
    ;; Ensure that files are correctly set
    (ensure-repository-hierarchy)
    ;; load the servers informations
    (load-repository-descriptions)
    ;; Parse the program arguments
    (let loop ((actions (stklos-pkg-arguments argv)))
      (unless (null? actions)
	(case ((if (pair? (car actions)) caar car) actions)
	  ((list)
	     (list-repository-packages))
	  ((sync)
	     (synchronize-servers))
	  ((delete-repo)
	     (rm-rf (stklos-pkg-cache-directory))
	     (rm-rf (stklos-pkg-servers-directory))
	     (exit 0))
	  ((fill-cache)
	     (fill-cache))
	  ((clear-cache)
	     (clear-cache))
	  ((extract)
	     (find-and-extract-package (cadar actions)
				       (stklos-pkg-extract-dir)))
	  ((package-deps)
	     (for-each (lambda (x) (printf "~a\n" x))
		       (package-deps* (cadar actions))))
	  (else (error "bad command ~S" (car actions))))
	(loop (cdr actions))))))
