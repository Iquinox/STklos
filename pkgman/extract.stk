;;;;
;;;; extract.stk	-- Implementation of stklos-pkg extract option
;;;; 
;;;; Copyright © 2007 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 15-Jan-2007 12:10 (eg)
;;;; Last file update: 14-Mar-2007 14:02 (eg)
;;;;

;; ----------------------------------------------------------------------
;; 	write-extract-makefile ...
;; ----------------------------------------------------------------------
;## (define (write-extract-makefile package version targets dir)
;## 
;##   (define (find-src name)
;##     (make-path name (format "~a.spi" name)))
;##   
;##   (define (make-entry name)
;##     (let ((src (find-src name)))
;##       (printf "~a.ostk: ~a\n" name src)
;##       (printf "\t(cd ~a; $(SCC) $(SFLAGS) -L .. -o ../~a.ostk ~a)\n\n"
;## 	      name name (basename src))))
;## 
;## ;;//  (define (make-library-entry)
;## ;;//    (printf "\n#Source of library ~s\n" package)
;## ;;//    (printf "$(PKGVERS).stk:\n")
;## ;;//    (printf "\techo -n > $(PKGVERS).stk\n")
;## ;;//    ;; Produce provides
;## ;;//    (for-each (lambda (x)
;## ;;//		(printf "\techo '(provide ~s)' >> $(PKGVERS).stk\n" x))
;## ;;//	      targets)
;## ;;//    ;; Produce inclusion of required packages + the package itself
;## ;;//    (for-each (lambda (x)
;## ;;//		(printf "\techo '(include ~s)' >> $(PKGVERS).stk\n"
;## ;;//			(find-src x)))
;## ;;//	      (append targets (list (package-sans-version package)))))
;## 
;##   (let* ((tmpl (make-path (%library-prefix)
;## 			  "etc" "stklos" "Makefile-stklospkg.tmpl"))
;## 	 (in   (open-file tmpl "r")))
;##     (if in
;## 	(let ((str  (port->string in))
;## 	      (flat (open-output-string)))
;## 	  (close-port in)
;## 	  ;; Create the list of all the modules to build
;## 	  (for-each (lambda (x) (format flat "  ~a.ostk \\\n"x)) targets)
;## 	  (format flat "  $(PKGVERS).ostk\n")
;## 	  ;; Build Makefile
;## 	  (with-output-to-file (make-path dir "Makefile")
;## 	    (lambda ()
;## 	      ;; Header
;## 	      (display
;## 	       (sed str
;## 		    `(("@OSTK@"    ,(get-output-string flat))
;## 		      ("@PKGVERS@" ,package)
;## 		      ("@PKG@"     ,(package-sans-version package))
;## 		      ("@PKGSRC@"  ,(basename
;## 				     (find-src (package-sans-version package))))
;## 		      ("@VERSION@" ,version)
;## 		      ("@SO@"      ,(exec "stklos-config --shared-suffix"))
;## 		      ("@SCOMP@"   ,(exec "stklos-config --compile"))
;## 		      ("@SLINK@"   ,(exec "stklos-config --link")))))
;## 	      (newline)
;## 	      ;; Build the entries for required packages 
;## 	      (for-each make-entry targets)
;## 	      ;; Build the source of the "library"
;## 	      ;;// (make-library-entry)
;## 	      (printf "# End of Makefile\n"))))
;## 	(eprintf "Warning: cannot find template Makefile ~S\n" tmpl))))

(define (write-extract-makefile package version targets dir)

  (define objs '())

  (define (flat-string lst)
    (with-output-to-string
      (lambda () (for-each (lambda (x) (printf "\t~a \\\n" x)) lst))))
  
  (define (build-target target)
    (eprintf "Construire target = ~S\n" target)
    (let* ((tunedir  (make-path target "stklos"))
	   (tuneconf (make-path tunedir "configure")))
      (cond
	((file-exists? tuneconf)
	   ;; We have a configure in a tuning
	   (set! objs (cons (format "~a.$(SO)" target) objs))
	   (printf "~a.$(SO):\n" target)
	   (printf "\t(cd ~a; configure; make)\n\n" tunedir))
	(else
	   ;; A simple package
	   (set! objs (cons (format "~a.ostk" target) objs))
	   (printf "~a.ostk: ~a/~a.spi\n" target target target)
	   (printf "\t(cd ~a; $(SCC) $(SFLAGS) -L .. -o ../~a.ostk ~a.spi)\n\n"
		   target target target)))))

  ;;;
  ;;; write-extract-file starts here
  ;;;
  (let* ((tmpl (make-path (%library-prefix) "etc" "stklos" "Makefile-scmpkg.tmpl"))
	 (in   (open-file tmpl "r")))
    (unless in
      (error 'write-extract-makefile "cannot open template Makefile (~s)" tmpl))
    
    (let ((make (port->string in))
	  (tmp  (with-output-to-string
		  (lambda ()
		    (eprintf "Targets ===~S\n" targets)
		    (for-each build-target targets)
		    (build-target package)))))
      (close-port in)
      (with-output-to-file (make-path dir "Makefile")
	(lambda ()
	  ;; Header
	  (display 
	   (sed make
		`(("@OBJS@"    ,(flat-string (reverse objs)))
		  ("@SO@"      ,(exec "stklos-config --shared-suffix"))
		  ("@SCOMP@"   ,(exec "stklos-config --compile"))
		  ("@SLINK@"   ,(exec "stklos-config --link")))))
	  (newline)
	  (display tmp)
	  (display "\n# End of Makefile\n"))))))


;; ----------------------------------------------------------------------
;; 	find-and-extract-package ...
;; ----------------------------------------------------------------------
(define (find-and-extract-package package dir)
  
  (define (extract-package pkg dir)
    (let ((pkgball (package-path pkg))
	  (tuning  (package-tuning pkg)))
      ;; create directory
      (unless (file-exists? dir)
	(make-directories dir))
      ;; extract package
      (unless (file-exists? pkgball)
	(die (format "cannot find pkgball in cache ~s" (basename pkgball))))
      (untar pkgball dir)
      ;; if the package has a tuning extract it too.
      (when tuning
	(let ((tuneball (tuning-path tuning)))
	  (unless (file-exists? pkgball)
	    (die (format "cannot find tuning pkgball in cache ~s"
			 (basename tuneball))))
	  (untar tuneball dir)
	  ;; Tune the original package
	  (tune-package pkg dir)))))

  (let ((pkg  (download-package package))
	(deps (package-deps* package)))
    ;; package (as well as its dependencies) is now in the cache.
    ;; extract all its dependencies
    (for-each (lambda (x) (extract-package (find-package x) dir))
	      deps)
    ;; extract the package itself and (eventually) its tuning
    (extract-package pkg dir)
    ;; Create the Makefile able to build the package
    (write-extract-makefile package (package-version pkg) deps dir)))
