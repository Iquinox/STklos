;;;;
;;;;
;;;; test-circular.stk         -- Test circular structures
;;;;
;;;; Copyright Â© 2018 Erick Gallesio - I3S-CNRS/Polytech Nice-Sophia <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 11-Jun-2018 15:19
;;;; Last file update: 22-Oct-2018 17:24 (eg)
;;;;


(require "test")

(test-section "Circular structures")

(define (circular-list val1 . vals)             ; The SRFI-1 function 
  (let ((ans (cons val1 vals)))
    (set-cdr! (last-pair ans) ans)
    ans))

(define (->str lst)
  (with-output-to-string (lambda () (write* lst))))

;; ======================================================================
;; Writing
;;
(define (generate-circular n)
  (let ((l '(end)))
    (dotimes (i n)
      (let ((x (list i i)))
        (set-cdr! x x)
        (set! l (cons (list x l (cdr l))
                      l))))
    l))


(test "write.circular1"
      "#0=(a . #0#)"
      (let ((x (list 'a)))
        (set-cdr! x x)
        (with-output-to-string (lambda () (write* x)))))

(test "write.circular2"
      "(#0=(a . #1=(b)) #0# #1#)"
      (let* ((x (list 'a 'b))
             (y (list x x (cdr x))))
        (with-output-to-string (lambda () (write* y)))))

(test "write.circular3"
      "#(1 #0=(a b) #0# 2)"
      (let* ((x (list 'a 'b))
             (y (vector 1 x x 2)))
        (with-output-to-string (lambda () (write* y)))))

(test "write.circular4"
      "#0=#(#0# #0#)"
      (let* ((x (vector 0 0)))
        (vector-set! x 0 x)
        (vector-set! x 1 x)
        (with-output-to-string (lambda () (write* x)))))

(test "write.circular5"
      "((#0=#(#0# 1) . #1=(#0#)) #0# (x #1#))"
      (let ((x (vector 0 1)))
        (vector-set! x 0 x)
        (let ((y (list x x)))
          (with-output-to-string (lambda () (write* `(,y ,x (x ,(cdr y)))))))))

(test "write.circular6"
      "((#0=(24 . #0#) #1=((#2=(23 . #2#) #3=((#4=(22 . #4#) #5=((#6=(21 . #6#) #7=((#8=(20 . #8#) #9=((#10=(19 . #10#) #11=((#12=(18 . #12#) #13=((#14=(17 . #14#) #15=((#16=(16 . #16#) #17=((#18=(15 . #18#) #19=((#20=(14 . #20#) #21=((#22=(13 . #22#) #23=((#24=(12 . #24#) #25=((#26=(11 . #26#) #27=((#28=(10 . #28#) #29=((#30=(9 . #30#) #31=((#32=(8 . #32#) #33=((#34=(7 . #34#) #35=((#36=(6 . #36#) #37=((#38=(5 . #38#) #39=((#40=(4 . #40#) #41=((#42=(3 . #42#) #43=((#44=(2 . #44#) #45=((#46=(1 . #46#) #47=((#48=(0 . #48#) #49=(end) ()) . #49#) #49#) . #47#) #47#) . #45#) #45#) . #43#) #43#) . #41#) #41#) . #39#) #39#) . #37#) #37#) . #35#) #35#) . #33#) #33#) . #31#) #31#) . #29#) #29#) . #27#) #27#) . #25#) #25#) . #23#) #23#) . #21#) #21#) . #19#) #19#) . #17#) #17#) . #15#) #15#) . #13#) #13#) . #11#) #11#) . #9#) #9#) . #7#) #7#) . #5#) #5#) . #3#) #3#) . #1#)"
      (with-output-to-string (lambda ()
                               (write* (generate-circular 25)))))


;;; Chibi tests
(test "chibi-circular.1" "#0=(1 . #0#)"   (->str (circular-list 1)))
(test "chibi-circular.2" "#0=(1 2 . #0#)" (->str (circular-list 1 2)))
(test "chibi-circular.3" "(1 . #0=(2 . #0#))" (->str (cons 1 (circular-list 2))))
(test "chibi-circular.4" "#0=(1 #0# 3)"
      (let ((x (list 1 2 3)))
        (set-car! (cdr x) x)
       (->str x)))

(test "chibi-circular.5" "(#0=(1 #0# 3))"
      (let ((x (list 1 2 3)))
        (set-car! (cdr x) x)
        (->str (list x))))
(test "chibi-circular.6" "(#0=(1 #0# 3) #0#)"
      (let ((x (list 1 2 3)))
        (set-car! (cdr x) x)
        (->str (list x x))))
(test "chibi-circular.7" "(#0=(1 . #0#) #1=(1 . #1#))"
      (->str (list (circular-list 1) (circular-list 1))))

(test "chibi-circular.8" "(#0=(1 . 2) #1=(1 . 2) #2=(3 . 4) #0# #1# #2#)"
      (let ((a (cons 1 2))
            (b (cons 1 2))
            (c (cons 3 4)))
        (->str (list a b c a b c))))

(test "chibi-circular.9" "((1 . 2) (1 . 2) (3 . 4) (1 . 2) (1 . 2) (3 . 4))"
      (let ((a (cons 1 2)) (b (cons 1 2)) (c (cons 3 4)))
        (with-output-to-string (lambda () (write (list a b c a b c))))))

(test "chibi-circular.10" "#0=((1 . 2) (1 . 2) (3 . 4) . #0#)"
      (let* ((a (cons 1 2))
             (b (cons 1 2))
             (c (cons 3 4))
             (ls (list a b c)))
        (set-cdr! (cddr ls) ls)
        (->str ls)))

(test "chibi-circular.11" "#0=#(#0#)"
      (let ((x (vector 1)))
        (vector-set! x 0 x)
        (->str x)))
(test "chibi-circular.12" "#0=#(1 #0#)"
      (let ((x (vector 1 2)))
        (vector-set! x 1 x)
        (->str x)))

(test "chibi-circular.13" "#0=#(1 #0# 3)"
      (let ((x (vector 1 2 3)))
        (vector-set! x 1 x)
        (->str x)))
(test "chibi-circular.14" "(#0=#(1 #0# 3))"
      (let ((x (vector 1 2 3)))
        (vector-set! x 1 x)
        (->str (list x))))
(test "chibi-circular.15" "#0=#(#0# 2 #0#)"
      (let ((x (vector 1 2 3)))
        (vector-set! x 0 x)
        (vector-set! x 2 x)
        (->str x)))

;; ======================================================================
;; Reading
;;
(test "read.circular1"
      #t
      (let ((l '#0=(0 #0#)))
        (and (eq? (car l) 0)
           (eq? (cadr l) l))))

(test "read.circular2"
      #t
      (let* ((l1 '(#0=(1 2 3) #0# #1=(2 #0#) #1#))
             (l2 '(#0=(1 2 3) #0# #1=(2 #0#) #1#)))
        (equal? l1 l2)))


(test "read.circular3"
      #t
      (let* ((l1 '((#0=(1 2 3) #0# #1=(2 #0#) #1#)))
             (l2 '((#3=(1 2 3) #3# #4=(2 #3#) #4#))))
        (equal? l1 l2)))


(test "read.circular4"
      #t
      (let* ((l1 (with-output-to-string (lambda()
                                         (write* (generate-circular 3)))))
             (l2 (with-input-from-string l1 read))
             (l3 (with-output-to-string (lambda() (write* l2)))))
        (equal? l1 l3)))

(test "useless.circular1"
      '((0 1) 2 3)
      (cons '#0=(0 1)  '#1=(2 3)))

(test "useless.circular2"
      '((0 1)  2 3)
      '(#0=(0 1) .  #0=(2 3)))



;; ======================================================================
(test-section-end)
