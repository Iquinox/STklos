;;;;
;;;; colorselector.stk		-- Color Selector GTklos Widget
;;;; 
;;;; Copyright © 2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 14-Feb-2002 22:47 (eg)
;;;; Last file update: 16-Feb-2002 11:54 (eg)
;;;;


;======================================================================
;
;			 < g t k - c o l o r >
;
;====================================================================== 
(define-class <gtk-color> ()
  ((%vector 	:init-form 	(make-vector 4 0.0))	;; The real value
   (red		:accessor	red
		:init-keyword	:red
		:allocation	:virtual
		:slot-ref	(lambda (o)
				  (vector-ref (slot-ref o '%vector) 0))
		:slot-set!	(lambda (o v)
				  (vector-set! (slot-ref o '%vector) 0 v)))
   (green	:accessor	green
		:init-keyword	:green
		:allocation	:virtual
		:slot-ref	(lambda (o)
				  (vector-ref (slot-ref o '%vector) 1))
		:slot-set!	(lambda (o v)
				  (vector-set! (slot-ref o '%vector) 1 v)))
   (blue	:accessor	blue
		:init-keyword	:blue
		:allocation	:virtual
		:slot-ref	(lambda (o)
				  (vector-ref (slot-ref o '%vector) 2))
		:slot-set!	(lambda (o v)
				  (vector-set! (slot-ref o '%vector) 2 v)))
   (opacity	:accessor	opacity
		:init-keyword	:opacity
		:allocation	:virtual
		:slot-ref	(lambda (o)
				  (vector-ref (slot-ref o '%vector) 3))
		:slot-set!	(lambda (o v)
				  (vector-set! (slot-ref o '%vector) 3 v)))))


;======================================================================
;
;			 < C o l o r - s e l e c t o r >
;
;====================================================================== 
(define-class <color-selector> (<gtk-widget>)  
  ((value	:accessor 	value
		:init-keyword	:value
		:allocation 	:virtual
		:slot-ref	(lambda (o)
				  (%color-ctrl (slot-ref o 'wid) 0))
		:slot-set!	(lambda (o v)
				  (let ((v (if (is-a? v <gtk-color>)
					       (slot-ref v '%vector)
					       v)))
				    (%color-ctrl (slot-ref o 'wid) 1 v))))
   (opacity	:accessor	opacity
		:init-keyword	:opacity
		:allocation	:virtual
		:slot-ref	(lambda (o)
				  (%color-ctrl (slot-ref o 'wid) 2))
		:slot-set!	(lambda (o v)
				  (%color-ctrl (slot-ref o 'wid) 3 v)))))



(define-method initialize ((self <color-selector>) initargs)
  ;; ****************************************************************
  ;; HORRIBLE KLUDGE: If a parent is specified with an opacity or
  ;; a value, GTk crashes. So, if we encounter a :parent option
  ;; we do the initialization without it and we parent the widget
  ;; after that.
  ;; ****************************************************************
  (let ((p (key-get initargs :parent #f)))
    (if p
	(begin
	  (next-method self (key-delete! initargs :parent))
	  (slot-set! self 'parent p))
	(next-method))))
	

(define-method realize-widget ((self <color-selector>) initargs)
  (let ((wid (%colorselector self)))
    (slot-set! self 'wid wid)))


;======================================================================
;
;			make-color-selector-dialog utility
;
;====================================================================== 
(define (make-color-selector-dialog :key (title "Choose a color ...")
				         (value #(0.5 0.5 0.5 0))
				         (opacity #t))
  (let* ((dialog (make <ok-cancel-dialog> :title title :modal #t))
	 (sel	 (make <color-selector> :value value
		       :opacity opacity :parent dialog))
	 (val    (wait-dialog dialog))
	 (res    (and (eq? val 'ok) (slot-ref sel 'value))))
    (destroy dialog)
    res))
	 
