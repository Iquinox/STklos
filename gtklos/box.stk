;;;;
;;;; box.stk	-- Vertical and Horizontal GTk Boxes
;;;; 
;;;; Copyright © 2001-2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 25-May-2001 15:44 (eg)
;;;; Last file update: 14-Feb-2002 12:14 (eg)
;;;;

;======================================================================
;
;	              C l a s s    < b o x >
;
;====================================================================== 
(define-class <box> (<gtk-container>)
  ((orientation   :getter	orientation
		  :allocation   :virtual
		  :slot-ref	(lambda (o)
				  (let ((type (%widget-type (wid o))))
				    (if (string=? type "GtkHBox")
					'horizontal
					'vertical)))
		  :slot-set!	(%gtk-slot-ro 'orientation))
   (expand	  :accessor	expand
		  :init-keyword :expand
		  :init-form	#f)
   (fill	  :accessor	fill
		  :init-keyword :fill
		  :init-form	#f)
   (padding	  :accessor	padding
		  :init-keyword	:padding
		  :init-form	0)
   (homogeneous	  :accessor	homogeneous
		  :init-keyword	:homogeneous
		  :allocation	:gtk-arg)))


(define-method realize-widget ((self <box>) initargs)
  (let* ((o 	   (key-get initargs :orientation 'vertical))
	 (builder  (case o
		     ((horizontal) %hbox)
		     ((vertical)   %vbox)
		     (else	   (%gtk-bad-orientation o)))))
    (slot-set! self 'wid (builder self))))


;;;;
;;;; Methods for Boxes
;;;; 
(define-method container-add! ((cont <box>) widget
			       :key (expand  (slot-ref cont 'expand))
			       	    (fill    (slot-ref cont 'fill))
				    (padding (slot-ref cont 'padding))
				    (end     #f))
  (let ((c (slot-ref cont   'wid))
	(w (slot-ref widget 'wid)))
    (%set-widget-parent! w c)
    
    (%child-set! c w :expand  expand)
    (%child-set! c w :fill    fill)
    (%child-set! c w :padding padding)
    (%child-set! c w :pack_type (if end 'end 'start))))
  


(define-method %container-place ((cont <box>) widget 
				 :key (expand  #t expand?)
				      (fill    #t fill?)
				      (padding 0  padding?))
 (let ((c (slot-ref cont   'wid))
       (w (slot-ref widget 'wid)))
   (when expand?  (%child-set! c w :expand  expand))
   (when padding? (%child-set! c w :padding padding))
   (when fill?	  (%child-set! c w :fill    fill)))
 (void))



;; ======================================================================
;;
;; 			C O N T A I N E R - I N F O
;;
;; ======================================================================
(define-method %container-info ((parent <box>) widget)
  (let ((w (wid widget))
	(c (wid parent)))
    (list :in	  parent
 	  :expand  (%child-get c w :expand)
	  :fill	   (%child-get c w :fill)
	  :padding (%child-get c w :padding)
	  :end	   (%child-get c w :pack_type))))

