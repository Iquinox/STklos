;;;;
;;;; button.stk	-- GTK Button Widget
;;;; 
;;;; Copyright © 2001-2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 30-May-2001 22:11 (eg)
;;;; Last file update: 12-Feb-2002 16:52 (eg)
;;;;

;======================================================================
;
;			< B u t t o n >
;
;====================================================================== 

(define (%button-image-get o)
  (let ((res (children o)))
    (if (null? res)
	#f
	(car res))))

(define (%button-image-set! o v)
  (let ((old (%button-image-get o)))
    (when old
      ;; Unparent the old window
      (container-remove! o old))

    ;; Set the new image
    (let ((img (cond
		 ((is-a? v <image>)
		     (if (parent v)
			 (error "Image ~S is already used elsewhere" v)
			 v))
		 ((string? v)
		     (make <image> :file v))
		 (else
		     (error "bad image specification ~S" v)))))
      (%set-widget-parent! (slot-ref img 'wid) (slot-ref o 'wid)))))


(define-class <button> (<gtk-container>) 
  ((command	:accessor	command
		:init-keyword   :command
		:init-form	#f
		:allocation	:gtk-signal
		:signal-name	"stklos:command")
   (text	:accessor       text
		:init-keyword   :text
		:gtk-name	"label"
		:allocation     :gtk-arg)
   (image	:accessor	image
		:init-keyword	:image
		:allocation	:virtual
		:slot-ref	%button-image-get
		:slot-set!	%button-image-set!)
   (relief	:accessor       relief
		:init-keyword   :relief
		:allocation     :gtk-arg)))


(define-method realize-widget ((self <button>) initargs)
  (let ((wid (%button self)))
    (slot-set! self 'wid wid)))
    
