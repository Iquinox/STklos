;;;;
;;;; fileselector.stk	-- GTKlos File Selector Widget
;;;; 
;;;; Copyright © 2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 15-Feb-2002 16:59 (eg)
;;;; Last file update: 15-Feb-2002 18:06 (eg)
;;;;

(define-class <file-selector> (<gtk-container>)
  ((value 	:accessor	value
		:init-keyword	:value
		:allocation	:virtual
		:slot-ref	(lambda (o)
				  (%file-ctrl (slot-ref o 'wid) 0))
		:slot-set!	(lambda (o v)
				  (%file-ctrl (slot-ref o 'wid) 1 v)))))
		

(define-method realize-widget ((self <file-selector>) initargs)
  (let ((title (key-get initargs :title "")))
    (slot-set! self 'wid (%fileseLector self title))))

;======================================================================
;
;		A dialog selector for choosing files
;
;====================================================================== 

(define (make-file-selector-dialog :key (title "Choose a file ...")
				        (value #f value?))
  (let* ((fs  (make <file-selector> :title title :modal #t))
	 (wid (slot-ref fs 'wid)))
    (when value?
      (slot-set! fs 'value value))

    (%widget-plist wid :button #f)
    (let Loop ()
      (unless (%widget-plist wid :button)
	(after 100)
	(Loop)))

    ;; Convention if user as clicked OK the :button property is set to 0
    (let ((result (if (eq? (%widget-plist wid :button) 0) (slot-ref fs 'value) #f)))
      (destroy fs)
      result)))
