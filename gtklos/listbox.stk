;;;;
;;;; listbox.stk	-- GTklos Listbox Class
;;;; 
;;;; Copyright © 2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 11-Oct-2000 11:27 (eg)
;;;; Last file update: 14-Feb-2002 12:37 (eg)
;;;;


(define (%set-listbox-items! o val)
  (if (list? val)
      (let ((w (slot-ref o 'wid)))
	(%set-list-items! w (map (lambda (x)
				   (if (is-a? x <gtk-widget>)
				       (slot-ref x 'wid)
				       x))
				 val))
	(%widget-plist w :value val))
      ;; Value is not a list
      (error '%set-list-items!
	     "value given to listbox ~S must be a list. It was ~S" o val)))

; ======================================================================
;
; 		               < L i s t b o x >
;
; ======================================================================
(define-class <listbox> (<scroll>)
  ((%lb)		;; Don't touch! Internal use only! (the listbox itself)
   (items		:accessor 	items
			:init-keyword	:items
			:allocation	:virtual
			:slot-ref	(lambda (o)
					  (%widget-plist (wid o):value))
			:slot-set!	%set-listbox-items!)
   (select-mode		:accessor	select-mode
			:init-keyword	:select-mode
			:allocation	:gtk-arg
			:gtk-widget	%lb
			:gtk-name	"selection_mode")
   (selection		:accessor	selection
			:init-keyword	:selection
			:allocation	:virtual
			:slot-ref	(lambda (o)
					  (%listbox-selection-get (wid o)))
			:slot-set!	(lambda (o v)
					  (let ((lb (slot-ref o 'wid)))
					    (%unselect-all-list-items! lb)
					    (for-each (lambda (x)
							(%select-list-item lb x))
						      v))))
   (command		:accessor	command
			:init-keyword	:command
			:init-form	#f
			:allocation	:gtk-signal
			:gtk-widget	%lb
			:signal-name	"stklos:changed-sel")))


(define-method initialize ((self <listbox>) initargs)
  ;; Force to have a null layout to avoid the creation of the implicit
  ;; vertical box. Furthermore, since the listbox is already placed
  ;; in the scrolled window, if the layout is not forced GTK issues
  ;; a warning
  (next-method self (list* :layout #f initargs)))


(define-method realize-widget ((self <listbox>) initargs)
  (next-method)
  (let ((wid (%listbox self)))
    (slot-set! self 'wid wid)
    ;; keep a reference to the (internal) listbox widget in the special slot %lb
    (slot-set! self '%lb (%widget-plist wid :listbox))))


; LocalWords:  listbox
