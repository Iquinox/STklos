;;;;
;;;; gauge.stk					-- GTK+ Gauge Widget
;;;; 
;;;; Copyright © 2001-2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 30-Jul-2001 07:57 (eg)
;;;; Last file update: 17-Jan-2002 19:22 (eg)
;;;;


;;; Slot `style' accessors
(define (%gtk-scrollbar-style-get o)
  (%widget-plist (slot-ref o 'wid) :style))

(define (%gtk-scrollbar-style-set! o v)
  (let ((wid (slot-ref o 'wid)))

    (unless (list? v) (error "style of ~S must be a list" o))

    ;; Compute the format string for displaying value
    (let* ((percent? (memq 'percent v))
	   (value?   (memq 'value   v))
	   (txt      (if (slot-bound? o 'text) (slot-ref o 'text) #f))
	   (fmt      (cond
		       ((and txt value?)   (string-append txt " (%v)"))
		       ((and txt percent?) (string-append txt " (%p %%)"))
		       (txt		   txt)
		       (value?		   "%v")
		       (percent?	   "%p %%")
		       (else 		   #f))))
      (when fmt
	(%gtk-gauge-format wid fmt))
      (%gtk-arg-set! wid :show_text (and fmt #t)))

    ;; Set activity mode
    (%gtk-arg-set! wid :activity_mode (and (memq 'activity v) #t))

    ;; Set bar style
    (%gtk-arg-set! wid :bar_style (if (memq 'discrete v) 'discrete 'continuous))

    ;; Save style in the widget plist
    (%widget-plist wid :style v)))

;;; Slot `text' accessors
(define (%gtk-scrollbar-text-get o)
  (%widget-plist (slot-ref o 'wid) :text))

(define (%gtk-scrollbar-text-set! o v)
  (%widget-plist (slot-ref o 'wid) :text)
  (%gtk-scrollbar-style-set! o (slot-ref o 'style)))



		  
;======================================================================
;
;			     < G a u g e >
;
;======================================================================

(define-class <gauge> (<gtk-widget> <gtk-adjustement>)
  ((orientation		:accessor	orientation
			:init-keyword	:orientation
			:allocation	:gtk-arg)
   (style		:accessor	style
			:init-keyword	:style
			:init-form	'()
			:allocation	:virtual
			:slot-ref	%gtk-scrollbar-style-get
			:slot-set! 	%gtk-scrollbar-style-set!)
   (text		:accessor	text
			:init-keyword	:text
			:init-form	#f
			:allocation	:virtual
			:slot-ref	%gtk-scrollbar-text-get
			:slot-set!	%gtk-scrollbar-text-set!)


;//   (activity-mode	:accessor	activity-mode
;//			:init-keyword	:activity-mode
;//			:allocation	:gtk-arg
;//			:gtk-name	"activity_mode")
;;//   (activity-step 	:accessor	activity-step
;;//			:init-keyword	:activity-step
;;//			:allocation	:gtk-arg
;;//			:gtk-name	"activity_step")
;;//   (activity-blocks	:accessor	activity-blocks
;;//			:init-keyword	:activity-blocks
;;//			:allocation	:gtk-arg
;;//			:gtk-name	"activity_blocks")
;;   (text-xalign 	:accessor	text-xalign
;;			:init-keyword	:text-xalign
;;			:allocation	:gtk-arg
;;			:gtk-name	"text_xalign")
;;   (text-yalign 	:accessor	text-yalign
;;			:init-keyword	:text-yalign
;;			:allocation	:gtk-arg
;;			:gtk-name	"text_yalign")
;;//   (draw-value		:accessor	draw-value
;;//			:init-keyword	:draw-value
;;//			:allocation	:gtk-arg
;;//			:gtk-name	"show_text")
   (bar-style	 	:accessor	bar-style
			:init-keyword	:bar-style
			:allocation	:gtk-arg
			:gtk-name	"bar_style")
;;//   (discrete-blocks 	:accessor	discrete-blocks
;;//			:init-keyword	:discrete-blocks
;;//			:allocation	:gtk-arg
;;//			:gtk-name	"discrete_blocks")))
   ))

(define-method realize-widget((self <gauge>) initargs)
  (let ((wid (%gauge self)))
    (slot-set! self 'wid wid)
    (slot-set! self '%adj (%widget-plist wid :adjustment))))

	       


