;;;;
;;;; frame.stk					-- GTklos frame widget
;;;; 
;;;; Copyright © 2001-2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 11-Jul-2001 12:09 (eg)
;;;; Last file update: 11-Feb-2002 16:23 (eg)
;;;;


(define (%title-justify-get o)
  (let ((value (%gtk-arg-get  (slot-ref o 'wid) :label_xalign)))
    (cond
      ((< value 0.3) 'left)
      ((> value 0.7) 'right)
      (else          'center))))

(define (%title-justify-set! o v)
  (%gtk-arg-set! (slot-ref o 'wid) :label_xalign (case v
						   ((left)   0.02)
						   ((center) 0.50)
						   ((right)  0.98)
						   (else     v))))

;======================================================================
;
;	              C l a s s    < f r a m e >
;
;======================================================================

(define-class <frame> (<gtk-layout>)
  ((title-justify :accessor	title-justify
		  :init-keyword	:title-justify
		  :allocation	:virtual
		  :slot-ref	%title-justify-get
		  :slot-set!	%title-justify-set!)
   (shadow	  :accessor	shadow
		  :init-keyword	:shadow	
		  :allocation	:gtk-arg)
   (title	  :accessor	title
		  :init-keyword	:title
		  :allocation	:gtk-arg
		  :gtk-name	"label")))

(define-method realize-widget ((self <frame>) initargs)
  (slot-set! self 'wid (%frame self)))

;//;;
;//;; CONTAINER-ADD!
;//;;
;//(define-method container-add! ((cont <frame>) (widget <gtk-widget>) . options)
;//  (let ((layout (slot-ref cont 'layout)))
;//    (if (is-a? layout <gtk-object>)
;//	(apply container-add! layout widget options)
;//	(%set-widget-parent! (slot-ref widget 'wid) (slot-ref cont 'wid)))))

