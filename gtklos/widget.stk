;;;;
;;;; widget.stk					-- GTK widget
;;;; 
;;;; Copyright © 2001-2008 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 30-May-2001 18:30 (eg)
;;;; Last file update:  9-May-2008 16:06 (eg)
;;;;


(define-generic container-add! <generic>)	;; forward declaration



(define-class <gtk-widget> (<gtk-object>)
  ((wid		:getter 	wid)		    ;; Widget Id
   (parent	:accessor     parent
		:init-keyword :parent
		:allocation   :virtual
		:slot-ref (lambda (o)
			    (%gtk-arg-get (slot-ref o 'wid) :parent))
		:slot-set! (lambda (o v)
			     (if (pair? v)
				 (apply container-add! (car v) o (cdr v))
				 (container-add! v o))))
   (%event 	:init-form 	#f)		    ;; Private event handler
   (event	:accessor	event
		:init-keyword	:event
		:allocation	:virtual
		:slot-ref	(lambda (o)
				  (slot-ref o '%event))
		:slot-set!	(lambda (o v)
				  (let ((old-event (slot-ref o '%event)))
				    (when old-event
				      (disconnect-event-handler! old-event o))
				    (connect-event-handler! v o)
				    (slot-set! o '%event v))))
   (widget-data :accessor     widget-data
		:init-keyword :widget-data
		:init-form    #f)
   (width    	:accessor     width
		:init-keyword :width   
		:allocation   :gtk-arg)
   (height	:accessor     height
		:init-keyword :height
		:allocation   :gtk-arg)
   (visible	:accessor     visible
		:init-keyword :visible
		:allocation   :gtk-arg)
   (sensitive	:accessor     sensitive
		:init-keyword :sensitive
		:allocation   :gtk-arg)
   (can-focus	:accessor     can-focus
		:init-keyword :can-focus
   		:allocation   :gtk-arg
		:gtk-name     "can_focus")
   (has-focus	:accessor     has-focus
		:init-keyword :has-focus
   		:allocation   :gtk-arg
		:gtk-name     "has_focus")
   (can-default	:accessor     can-default
		:init-keyword :can-default
   		:allocation   :gtk-arg
		:gtk-name     "can_default")
   (has-default :accessor     has-default
		:init-keyword :has-default
   		:allocation   :virtual ;; to ensure that can-default is #t
		:slot-ref     (lambda (o)
				(%gtk-arg-get (slot-ref o 'wid) :has_default))
		:slot-set!    (lambda (o v)
				(unless (slot-ref o 'can-default)
				  ;; Force can-default to avoid GTK warning
				  (slot-set! o 'can-default #t))
				(update)
				(%gtk-arg-set! (slot-ref o 'wid) :has_default v)
				(update)))
   (tooltip	:accessor     tooltip
		:init-keyword :tooltip
		:allocation   :virtual
		:slot-ref     (lambda (o)
				(%tooltip (slot-ref o 'wid)))
		:slot-set!    (lambda (o v)
				(%tooltip (slot-ref o 'wid) v)))))

;======================================================================
;
;			Methods for Widgets
;
;====================================================================== 
(define-method realize-widget ((self <gtk-widget>) initargs)
  ;; Do nothing
  #f)

(define-method internal-arrange-widget ((self <gtk-widget>) initargs)
  ;; Do nothing
  #f)


(define-method initialize ((self <gtk-widget>) initargs)
  (realize-widget self initargs)
  (next-method)
  (internal-arrange-widget self initargs))




;;; Destroy
;;;
(define-method destroy ((w <gtk-widget>))
  (let ((event (slot-ref w '%event)))	  	; Disconnect w from its  handler
    (when event
      (disconnect-event-handler! event w)))
  (%destroy (wid w))				; destroy the GTK widget
  (change-class w <destroyed-object>))		; Change class to <destroyed-object>
