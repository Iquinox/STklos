;;;;
;;;; canvitem.stk	-- GTklos Canvas Items 
;;;; 
;;;; Copyright © 2002 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date:  9-Mar-2002 11:39 (eg)
;;;; Last file update:  8-Apr-2002 21:28 (eg)
;;;;


;;;; ======================================================================
;;;; 
;;;; 		< g t k - c a n v a s - i t e m >   c l a s s
;;;;
;;;; ======================================================================
(define-class <gtk-canvas-item> (<gtk-object>)
  ((wid		 :getter		wid)
   (%event 	:init-form 	#f)		    ;; Private event handler
   (event	:accessor	event
		:init-keyword	:event
		:allocation	:virtual
		:slot-ref	(lambda (o)
				  (slot-ref o '%event))
		:slot-set!	(lambda (o v)
				  (let ((old-event (slot-ref o '%event)))
				    (when old-event
				      (disconnect-event-handler! old-event o))
				    (connect-event-handler! v o)
				    (slot-set! o '%event v))))
   (visible	 :accessor	visible
		 :allocation	:virtual
		 :init-form	#t
		 :slot-ref	(lambda (o)
				  (and (%widget-plist (slot-ref o 'wid) :visible)
				       #t))
		 :slot-set!	(lambda (o v)
				  (let ((w (slot-ref o 'wid)))
				    (%canvas-visibility-set! w v)
				    (%widget-plist w :visible v))))
   (bounding-box :getter	bounding-box
		 :allocation	:virtual
		 :slot-ref	(lambda (o)
				  (%canvas-bb (slot-ref o 'wid)))
		 :slot-set!	(%gtk-slot-ro 'bounding-box))
   (parent 	 :accessor     	parent
		 :init-form	#f
		 :init-keyword	:parent)))


(define-method make-canvas-item ((self <gtk-canvas-item>))
  (error 'make-canvas-item "not defined constructor for ~S" self))


;;;
;;; Initialize for <gtk-canvas-item>
;;;
(define-method initialize ((self <gtk-canvas-item>) initargs)
  (let ((parent (key-get initargs :parent #f)))
    ;; Verify that we have a parent for this object
    (unless parent
      (error 'initialize "cannot create a ~S without parent"
	     (class-name (class-of self))))

    ;; Create the canvas item
    (let ((id (make-canvas-item self (slot-ref parent 'wid))))
      (slot-set! self 'wid id))      

    ;; And initialize it
    (next-method)))


;;;;
;;;; < g t k - c a n v a s- R E > 
;;;; 
(define-class <gtk-canvas-RE> (<gtk-canvas-item>)
  ((x1	 		:accessor	x1
			:init-keyword	:x1
			:allocation	:gtk-arg)
   (x2 			:accessor	x2
			:init-keyword	:x2
			:allocation	:gtk-arg)
   (y1 			:accessor	y1
			:init-keyword	:y1
			:allocation	:gtk-arg)
   (y2 			:accessor	y2
			:init-keyword	:y2
			:allocation	:gtk-arg)
   (fill-color		:accessor	fill-color
			:init-keyword	:fill-color
			:allocation	:virtual
			:slot-ref	(lambda (o) 'TO-BE-CHANGED)
			:slot-set! 	(lambda (o v)
					  (%gtk-arg-string-set! (wid o)
								:fill_color
								v)))
  ;; OUTLINE-COLOR
  ))

;;;;
;;;; < g t k - c a n v a s - l i n e>
;;;;
(define-class <gtk-canvas-line> (<gtk-canvas-item>)
  ((points		:accessor	points
			:init-keyword	:points
			:allocation	:virtual
			:slot-ref	(lambda (o)
					  (%canvas-points (slot-ref o 'wid)))
			:slot-set!	(lambda (o v)
					  (let ((len (length v)))
					    (when (or (< len 4) (not (even? len)))
					      (error 'points
						     "illegal number of points ~S"
						     v))
					    (%canvas-points (slot-ref o 'wid) v))))
   (thickness		:accessor	thickness
			:init-keyword	:thickness
			:allocation	:virtual
			:init-form	1
			:slot-ref	(lambda (o)
					  (let ((w (slot-ref o 'wid)))
					    (%widget-plist w :thickness)))
			:slot-set!	(lambda (o v)
					  (let ((w (slot-ref o 'wid)))
					    (%canvas-line-width! w v)
					    (%widget-plist w :thickness v))))
   
   ;; FILL-COLOR
   ;; FILL-STIPPLE
   ))


;;;; ======================================================================
;;;;
;;;; 		     < C a n v a s - l i n e>   c l a s s
;;;;
;;;; ======================================================================
(define-class <canvas-line> (<gtk-canvas-line>)
  (;; arrow (-    <-    ->    <-> )
   (arrow		:accessor	arrow
			:init-keyword	:arrow
			:allocation	:virtual
			:slot-ref
			(lambda (o)
			  (let* ((w     (slot-ref o 'wid))
				 (first (%gtk-arg-get w :first_arrowhead))
				 (last  (%gtk-arg-get w :last_arrowhead)))
			    (if first
				(if last '<-> '<-)
				(if last '-> '-))))
			:slot-set!
			(lambda (o v)
			  (let* ((w (slot-ref o 'wid)))
			    (case v
			      ((-)   (%gtk-arg-set! w :first_arrowhead #f)
			       	     (%gtk-arg-set! w :last_arrowhead  #f))
			      ((<->) (%gtk-arg-set! w :first_arrowhead #t)
			       	     (%gtk-arg-set! w :last_arrowhead  #t))
			      ((<-)  (%gtk-arg-set! w :first_arrowhead #t)
			       	     (%gtk-arg-set! w :last_arrowhead  #f))
			      ((->)  (%gtk-arg-set! w :first_arrowhead #f)
			       	     (%gtk-arg-set! w :last_arrowhead  #t))
			      (else
			       (error '%canvas-arrow-set!
				      "arrow should be <-, <->, -> or -. It was ~S"
				      v))))))

   ;; arrow-shape (a list of 3 numbers)
   (arrow-shape		:accessor	arrow-shape
			:init-keyword	:arrow-shape
			:allocation	:virtual
			:slot-ref
			(lambda (o)
			  (let ((w (slot-ref o 'wid)))
			    (list (%gtk-arg-get w :arrow_shape_a)
				  (%gtk-arg-get w :arrow_shape_b)
				  (%gtk-arg-get w :arrow_shape_c))))
			:slot-set!
			(lambda (o v)
			  (let ((w (slot-ref o 'wid)))
			    (unless (and (list? v) (= (length v) 3))
			      (error "bad arrow shape value ~S" v))
			    (%gtk-arg-set! w :arrow_shape_a (car v))
			    (%gtk-arg-set! w :arrow_shape_b (cadr v))
			    (%gtk-arg-set! w :arrow_shape_c (caddr v)))))

   ;; cap style (not-last, butt, round, projecting)
   (cap-style		:accessor	cap-style
			:init-keyword	:cap-style
			:allocation	:gtk-arg
			:gtk-name	"cap_style")
   ;; join style (not-last, miter, round, bevel)
   (join-style		:accessor	join-style
			:init-keyword	:join-style
			:allocation	:gtk-arg
			:gtk-name	"join_style")
   ;; line style (solid, dotted, dashed)
   (line-style		:accessor	line-style
			:init-keyword	:line-style
			:allocation	:gtk-arg
			:gtk-name	"line_style")	
   (smooth		:accessor	smooth
			:init-keyword	:smooth
			:allocation	:gtk-arg)
   (spline-steps	:accessor	spline-steps
			:init-keyword	:spline-steps
			:allocation	:gtk-arg
			:gtk-name	"spline_steps")))


(define-method make-canvas-item ((self <canvas-line>) parent)
  (%make-line parent self))


;;;; ======================================================================
;;;;
;;;; 		  < C a n v a s - p o l y g o n >   c l a s s
;;;;
;;;; ======================================================================
(define-class <canvas-polygon> (<gtk-canvas-line>)
  (;; FILL-COLOR
   ;; OUTLINE-COLOR
   ;; FILL-STIPPLE
   ;; OUTLINE-STIPPLE
   ))

(define-method make-canvas-item ((self <canvas-polygon>) parent)
  (%make-polygon parent self))


;;;; ======================================================================
;;;;
;;;; 		     < C a n v a s - r e c t a n g l e>   c l a s s
;;;;
;;;; ======================================================================
(define-class <canvas-rectangle> (<gtk-canvas-RE>)
  ())

(define-method make-canvas-item ((self <canvas-rectangle>) parent)
  (%make-rectangle parent self))

;;;; ======================================================================
;;;;
;;;; 		     < C a n v a s - e l l i p s e>   c l a s s
;;;;
;;;; ======================================================================
(define-class <canvas-ellipse> (<gtk-canvas-RE>)
  ())

(define-method make-canvas-item ((self <canvas-ellipse>) parent)
  (%make-ellipse parent self))

;;;; ======================================================================
;;;;
;;;; 		     < C a n v a s - t e x t>   c l a s s
;;;;
;;;; ======================================================================
(define-class <canvas-text> (<gtk-canvas-item>)
  ((x			:accessor	x
			:init-keyword	:x
			:allocation	:gtk-arg)
   (y			:accessor	y
			:init-keyword	:y
			:allocation	:gtk-arg)
   (text		:accessor	text
			:init-keyword	:text
			:allocation	:gtk-arg)
   (anchor		:accessor	anchor
			:init-keyword	:anchor
			:allocation	:gtk-arg)	
   (justification	:accessor	justification
			:init-keyword	:justification
			:allocation	:gtk-arg)
   (width		:getter		width
			:allocation	:virtual
			:slot-ref 	(lambda (o)
					  (%gtk-arg-get (slot-ref o 'wid)
							:text_width))
			:slot-set!	(%gtk-slot-ro 'width))
   (height		:getter		height
			:allocation	:virtual
			:slot-ref	(lambda (o)
					  (%gtk-arg-get (slot-ref o 'wid)
							:text_height))
			:slot-set!	(%gtk-slot-ro 'height))
   (clip		:accessor	clip
			:init-keyword	:clip
			:allocation	:gtk-arg)
   (clip-width		:accessor	clip-width
			:init-keyword	:clip-width
			:allocation	:gtk-arg
			:gtk-name	"clip_width")
   (clip-height		:accessor	clip-height
			:init-keyword	:clip-height
			:allocation	:gtk-arg
			:gtk-name	"clip_height")
   ;; X-OFFSET
   ;; Y-OFFSET
   ))


(define-method make-canvas-item ((self <canvas-text>) parent)
  (%make-text parent self))

;;;; ======================================================================
;;;;
;;;; 		     < C a n v a s - i m a g e>   c l a s s
;;;;
;;;; ======================================================================
(define-class <canvas-image> (<gtk-canvas-item>)
  ((image		:accessor	image
			:init-keyword	:image
			:allocation	:virtual
			:init-form	#f
			:slot-ref	(lambda (o)
					  (%widget-plist (slot-ref o 'wid)
							 :image))
			:slot-set!	(lambda (o v)
					  (%gtk-arg-set! (slot-ref o 'wid)
							 :image
							 (slot-ref v 'wid))
					  (%widget-plist (slot-ref o 'wid)
							 :image v)))
   (x			:accessor	x
			:init-keyword	:x
			:allocation	:gtk-arg)
   (y			:accessor	y
			:init-keyword	:y
			:allocation	:gtk-arg)
   (anchor		:accessor	anchor
			:init-keyword	:anchor
			:allocation	:gtk-arg)	
   (width		:getter		width
			:allocation	:gtk-arg)
   (height		:getter		height
			:allocation	:gtk-arg)))

(define-method make-canvas-item ((self <canvas-image>) parent)
  (%make-canvas-image parent self))

;;;; ======================================================================
;;;;
;;;; 		     < C a n v a s - w i d g e t >   c l a s s
;;;;
;;;; ======================================================================
(define-class <canvas-widget> (<gtk-canvas-item>)
  ((widget		:accessor	widget
			:init-keyword	:widget
			:allocation	:virtual
			:slot-ref	(lambda (o)
					  (%widget-plist (slot-ref o 'wid)
							 :widget))
			:slot-set!	(lambda (o v)
					  (%gtk-arg-set! (slot-ref o 'wid)
							 :widget
							 (slot-ref v 'wid))
					  (%widget-plist (slot-ref o 'wid)
							 :widget v)))
   (x			:accessor	x
			:init-keyword	:x
			:allocation	:gtk-arg)
   (y			:accessor	y
			:init-keyword	:y
			:allocation	:gtk-arg)
   (anchor		:accessor	anchor
			:init-keyword	:anchor
			:allocation	:gtk-arg)	
   (width		:getter		width
			:allocation	:gtk-arg)
   (height		:getter		height
			:allocation	:gtk-arg)))

(define-method make-canvas-item ((self <canvas-widget>) parent)
  (%make-canvas-widget parent self))

